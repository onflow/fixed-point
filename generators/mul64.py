# mul64.py - Generates Go test data for UFix64 and Fix64 multiplication (including overflow/underflow)

from decimal import Decimal, getcontext
from utils import to_ufix64, to_fix64, go_hex64, FIX64_SCALE, MASK64, parseInput64

getcontext().prec = 50

MulUFix64Tests = [
    # Simple cases
    ("1.0", "1.0"),
    ("1.0", "0.0"),
    ("0.0", "0.0"),
    ("1.0", "1e8"),
    ("1.0", "100000001.0"),
    ("3.0", "6700417.0"),
    ("3.0", "5.0"),
    ("3.0", "17.0"),
    ("3.0", "257.0"),
    ("3.0", "641.0"),
    ("3.0", "65537.0"),

    # The prime factors of UINT64_MAX are 3, 5, 17, 257, 641, 65537, and 6700417
    # The values below are different subsets of those numbers multipled together to
    # create values that should multiply to exactly UFix64Max
    ("27530.74036095", "6700417"),
    ("42007935", "4391.25228929"),
    ("65535", "2814792.71743489"),
    ("15", "12297829382.47303441"),
    ("3", "61489146912.36517205"),

    # Slightly less than the sqrt of UFix64Max
    ("429496.7295", "429496.7295"),
    ("429496.72959999", "429496.72959999"),

    ("MaxUFix64", "1.0"),
    ("MaxUFix64", "0.1"),
    ("MaxUFix64", "0.01"),
    ("MaxUFix64", "0.001"),
    ("MaxUFix64", "0.0001"),
    ("MaxUFix64", "0.00001"),
    ("MaxUFix64", "0.000001"),
    ("MaxUFix64", "0.0000001"),
    ("MaxUFix64", "0.00000001"),
    ("MaxUFix64", "0.0"),
    ("MaxUFix64 - 1.0", "1.0"),
    ("HalfMaxUFix64", "2.0"),

    # Multiply to the minimum UFix64 value
    ("0.1", "0.0000001"),
    ("0.01", "0.000001"),
    ("0.001", "0.00001"),
    ("0.0001", "0.0001"),
    ("0.00001", "0.001"),
    ("0.000001", "0.01"),
    ("0.0000001", "0.1"),
    ("0.00000005", "0.2"),
    ("0.00000002", "0.5"),

    # Same as above, plus iota
    ("0.10000001", "0.0000001"),
    ("0.01000001", "0.000001"),
    ("0.00100001", "0.00001"),
    ("0.00010001", "0.0001"),
    ("0.00001", "0.00100001"),
    ("0.000001", "0.01000001"),
    ("0.0000001", "0.10000001"),
    ("0.00000005", "0.20000001"),
    ("0.00000002", "0.50000001"),
]

MulUFix64OverflowTests = [
    ("MaxUFix64", "1.1"),
    ("MaxUFix64", "1.01"),
    ("MaxUFix64", "1.001"),
    ("MaxUFix64", "1.00001"),
    ("MaxUFix64", "1.0000001"),
    ("MaxUFix64", "MaxUFix64"),

    # sqrt(MaxUFix64) and above
    ("429496.7296", "429496.7296"),
    ("429496.72960001", "429496.72960001"),

    # Factors of MaxUFix64, plus iota
    ("27530.74036095", "6700417.00000001"),
    ("42007935.00000001", "4391.25228929"),
    ("65535.00000001", "2814792.71743489"),
    ("15.00000001", "12297829382.47303441"),
    ("3.00000001", "61489146912.36517205"),

    ("184467440737.09551615", "1.00000001"),
    ("18446744073.70955161", "10.0000001"),
    ("1844674407.37095516", "100.000001"),
    ("184467440.73709551", "1000.00001"),
    ("18446744.07370955", "10000.0001"),
    ("1844674.40737095", "100000.001"),
    ("184467.44073709", "1000000.01"),
    ("18446.74407370", "10000000.1"),

    ("HalfMaxUFix64", "2.00000001"),
    ("HalfMaxUFix64", "2.0000001"),
    ("HalfMaxUFix64", "2.000001"),
    ("HalfMaxUFix64", "2.0001"),
    ("HalfMaxUFix64", "2.001"),
    ("HalfMaxUFix64", "2.01"),
    ("HalfMaxUFix64", "2.1"),
]

MulUFix64UnderflowTests = [
    ("0.00000001", "0.0000001"),
    ("0.0000001", "0.00000001"),
    ("0.000001", "0.000001"),

    ("0.01", "0.0000001"),
    ("0.001", "0.000001"),
    ("0.0001", "0.00001"),
    ("0.00001", "0.0001"),
    ("0.000001", "0.001"),
    ("0.0000001", "0.01"),
    ("0.0000001", "0.01"),

    ("0.99999999", "0.00000001"),
    ("0.09999999", "0.0000001"),
    ("0.00999999", "0.000001"),
    ("0.00099999", "0.00001"),
    ("0.00009999", "0.0001"),
    ("0.00000999", "0.001"),
    ("0.00000099", "0.01"),
    ("0.00000009", "0.1"),

    ("0.00000005", "0.19999999"),
    ("0.00000002", "0.49999999"),
]

MulFix64Tests = [
    # Simple cases
    # Simple cases
    ("1.0", "1.0"),
    ("-1.0", "-1.0"),
    ("1.0", "-1.0"),
    ("-1.0", "1.0"),
    ("1.0", "0.0"),
    ("0.0", "0.0"),
    ("1.0", "1e8"),
    ("1.0", "100000001.0"),
    ("1.0", "100000000.00000001"),
    ("3.0", "-6700417.0"),
    ("3.0", "5.0"),
    ("-3.0", "17.0"),
    ("3.0", "257.0"),
    ("-3.0", "641.0"),
    ("-3.0", "-65537.0"),

    # Some values that multiply to values very close to Fix64Max
    ("27530.74036094", "3350208.5"),
    ("21003967.5", "4391.25228928"),
    ("32767.5", "2814792.71743488"),
    ("7.5", "12297829382.47303440"),
    ("1.5", "61489146912.36517204"),

    ("27530.74036095", "-3350208.5"),
    ("21003967.5", "-4391.25228929"),
    ("32767.5", "-2814792.71743489"),
    ("7.5", "-12297829382.47303441"),
    ("1.5", "-61489146912.36517205"),

    ("-27530.74036095", "3350208.5"),
    ("-21003967.5", "4391.25228929"),
    ("-32767.5", "2814792.71743489"),
    ("-7.5", "12297829382.47303441"),
    ("-1.5", "61489146912.36517205"),

    ("-27530.74036094", "-3350208.5"),
    ("-21003967.5", "-4391.25228928"),
    ("-32767.5", "-2814792.71743488"),
    ("-7.5", "-12297829382.47303440"),
    ("-1.5", "-61489146912.36517204"),

    # Slightly less than the sqrt of Fix64Max
    ("303700.0499", "303700.0499"),
    ("303700.04999760", "303700.04999760"),

    # The exact square root of abs(Fix64Min) should work if the result is negative
    ("-303700.04999760", "303700.04999760"),
    ("303700.04999760", "-303700.04999760"),

    ("MaxFix64", "1.0"),
    ("MaxFix64", "0.1"),
    ("MaxFix64", "0.01"),
    ("MaxFix64", "0.001"),
    ("MaxFix64", "0.0001"),
    ("MaxFix64", "0.00001"),
    ("MaxFix64", "0.000001"),
    ("MaxFix64", "0.0000001"),
    ("MaxFix64", "0.00000001"),
    ("MaxFix64", "0.0"),
    ("MaxFix64 - 1.0", "1.0"),
    ("HalfMaxFix64", "2.0"),

    ("MaxFix64", "-1.0"),
    ("MaxFix64", "-0.1"),
    ("MaxFix64", "-0.01"),
    ("MaxFix64", "-0.001"),
    ("MaxFix64", "-0.0001"),
    ("MaxFix64", "-0.00001"),
    ("MaxFix64", "-0.000001"),
    ("MaxFix64", "-0.0000001"),
    ("MaxFix64", "-0.00000001"),
    ("MaxFix64 - 1.0", "-1.0"),
    ("HalfMaxFix64", "-2.0"),

    ("MinFix64", "1.0"),
    ("MinFix64", "0.1"),
    ("MinFix64", "0.01"),
    ("MinFix64", "0.001"),
    ("MinFix64", "0.0001"),
    ("MinFix64", "0.00001"),
    ("MinFix64", "0.000001"),
    ("MinFix64", "0.0000001"),
    ("MinFix64", "0.00000001"),
    ("MinFix64", "0.0"),
    ("MinFix64 + 1.0", "1.0"),
    ("HalfMinFix64", "2.0"),

    ("MinFix64", "-0.99999999"),
    ("MinFix64", "-0.1"),
    ("MinFix64", "-0.01"),
    ("MinFix64", "-0.001"),
    ("MinFix64", "-0.0001"),
    ("MinFix64", "-0.00001"),
    ("MinFix64", "-0.000001"),
    ("MinFix64", "-0.0000001"),
    ("MinFix64", "-0.00000001"),
    ("MinFix64 + 1e-8", "-1.0"),
    ("HalfMinFix64 + 1e-8", "-2.0"),

    # Multiply to the smallest magnitude Fix64 value
    ("0.1", "0.0000001"),
    ("0.01", "0.000001"),
    ("0.001", "0.00001"),
    ("0.0001", "0.0001"),
    ("0.00001", "0.001"),
    ("0.000001", "0.01"),
    ("0.0000001", "0.1"),
    ("0.00000005", "0.2"),
    ("0.00000002", "0.5"),

    ("0.1", "-0.0000001"),
    ("0.01", "-0.000001"),
    ("0.001", "-0.00001"),
    ("0.0001", "-0.0001"),
    ("0.00001", "-0.001"),
    ("0.000001", "-0.01"),
    ("0.0000001", "-0.1"),
    ("0.00000005", "-0.2"),
    ("0.00000002", "-0.5"),

    ("-0.1", "0.0000001"),
    ("-0.01", "0.000001"),
    ("-0.001", "0.00001"),
    ("-0.0001", "0.0001"),
    ("-0.00001", "0.001"),
    ("-0.000001", "0.01"),
    ("-0.0000001", "0.1"),
    ("-0.00000005", "0.2"),
    ("-0.00000002", "0.5"),

    ("-0.1", "-0.0000001"),
    ("-0.01", "-0.000001"),
    ("-0.001", "-0.00001"),
    ("-0.0001", "-0.0001"),
    ("-0.00001", "-0.001"),
    ("-0.000001", "-0.01"),
    ("-0.0000001", "-0.1"),
    ("-0.00000005", "-0.2"),
    ("-0.00000002", "-0.5"),

    # Same as above, plus iota
    ("0.10000001", "0.0000001"),
    ("0.01000001", "0.000001"),
    ("0.00100001", "0.00001"),
    ("0.00010001", "0.0001"),
    ("0.00001", "0.00100001"),
    ("0.000001", "0.01000001"),
    ("0.0000001", "0.10000001"),
    ("0.00000005", "0.20000001"),
    ("0.00000002", "0.50000001"),

    ("0.10000001", "-0.0000001"),
    ("0.01000001", "-0.000001"),
    ("0.00100001", "-0.00001"),
    ("0.00010001", "-0.0001"),
    ("0.00001", "-0.00100001"),
    ("0.000001", "-0.01000001"),
    ("0.0000001", "-0.10000001"),
    ("0.00000005", "-0.20000001"),
    ("0.00000002", "-0.50000001"),

    ("-0.10000001", "0.0000001"),
    ("-0.01000001", "0.000001"),
    ("-0.00100001", "0.00001"),
    ("-0.00010001", "0.0001"),
    ("-0.00001", "0.00100001"),
    ("-0.000001", "0.01000001"),
    ("-0.0000001", "0.10000001"),
    ("-0.00000005", "0.20000001"),
    ("-0.00000002", "0.50000001"),

    ("-0.10000001", "-0.0000001"),
    ("-0.01000001", "-0.000001"),
    ("-0.00100001", "-0.00001"),
    ("-0.00010001", "-0.0001"),
    ("-0.00001", "-0.00100001"),
    ("-0.000001", "-0.01000001"),
    ("-0.0000001", "-0.10000001"),
    ("-0.00000005", "-0.20000001"),
    ("-0.00000002", "-0.50000001"),
]

MulFix64OverflowTests = [
    ("MaxFix64", "1.1"),
    ("MaxFix64", "1.01"),
    ("MaxFix64", "1.001"),
    ("MaxFix64", "1.00001"),
    ("MaxFix64", "1.0000001"),
    ("MaxFix64", "MaxFix64"),
    ("HalfMaxFix64", "HalfMaxFix64 + 1.0"),
    ("HalfMaxFix64", "HalfMaxFix64 + 0.1"),
    ("HalfMaxFix64", "HalfMaxFix64 + 0.01"),
    ("HalfMaxFix64", "HalfMaxFix64 + 0.001"),
    ("HalfMaxFix64", "HalfMaxFix64 + 0.0001"),
    ("HalfMaxFix64", "HalfMaxFix64 + 0.00001"),
    ("HalfMaxFix64", "HalfMaxFix64 + 0.000001"),
    ("HalfMaxFix64 + 0.00000001", "HalfMaxFix64 + 0.00000001"),
    ("HalfMinFix64", "HalfMinFix64 + 1.0"),
    ("HalfMinFix64", "HalfMinFix64 + 0.1"),
    ("HalfMinFix64", "HalfMinFix64 + 0.01"),
    ("HalfMinFix64", "HalfMinFix64 + 0.001"),
    ("HalfMinFix64", "HalfMinFix64 + 0.0001"),
    ("HalfMinFix64", "HalfMinFix64 + 0.00001"),
    ("HalfMinFix64", "HalfMinFix64 + 0.000001"),
    ("HalfMinFix64", "HalfMinFix64 + 0.0000001"),
]

MulFix64UnderflowTests = [
    ("0.00000001", "0.0000001"),
    ("0.0000001", "0.00000001"),
    ("0.000001", "0.000001"),

    ("0.00000001", "-0.0000001"),
    ("0.0000001", "-0.00000001"),
    ("0.000001", "-0.000001"),

    ("-0.00000001", "0.0000001"),
    ("-0.0000001", "0.00000001"),
    ("-0.000001", "0.000001"),

    ("-0.00000001", "-0.0000001"),
    ("-0.0000001", "-0.00000001"),
    ("-0.000001", "-0.000001"),

    ("0.01", "0.0000001"),
    ("0.001", "0.000001"),
    ("0.0001", "0.00001"),
    ("0.00001", "0.0001"),
    ("0.000001", "0.001"),
    ("0.0000001", "0.01"),
    ("0.0000001", "0.01"),

    ("0.01", "-0.0000001"),
    ("0.001", "-0.000001"),
    ("0.0001", "-0.00001"),
    ("0.00001", "-0.0001"),
    ("0.000001", "-0.001"),
    ("0.0000001", "-0.01"),
    ("0.0000001", "-0.01"),

    ("-0.01", "0.0000001"),
    ("-0.001", "0.000001"),
    ("-0.0001", "0.00001"),
    ("-0.00001", "0.0001"),
    ("-0.000001", "0.001"),
    ("-0.0000001", "0.01"),
    ("-0.0000001", "0.01"),

    ("-0.01", "-0.0000001"),
    ("-0.001", "-0.000001"),
    ("-0.0001", "-0.00001"),
    ("-0.00001", "-0.0001"),
    ("-0.000001", "-0.001"),
    ("-0.0000001", "-0.01"),
    ("-0.0000001", "-0.01"),

    ("0.99999999", "0.00000001"),
    ("0.09999999", "0.0000001"),
    ("0.00999999", "0.000001"),
    ("0.00099999", "0.00001"),
    ("0.00009999", "0.0001"),
    ("0.00000999", "0.001"),
    ("0.00000099", "0.01"),
    ("0.00000009", "0.1"),

    ("0.99999999", "-0.00000001"),
    ("0.09999999", "-0.0000001"),
    ("0.00999999", "-0.000001"),
    ("0.00099999", "-0.00001"),
    ("0.00009999", "-0.0001"),
    ("0.00000999", "-0.001"),
    ("0.00000099", "-0.01"),
    ("0.00000009", "-0.1"),

    ("-0.99999999", "0.00000001"),
    ("-0.09999999", "0.0000001"),
    ("-0.00999999", "0.000001"),
    ("-0.00099999", "0.00001"),
    ("-0.00009999", "0.0001"),
    ("-0.00000999", "0.001"),
    ("-0.00000099", "0.01"),
    ("-0.00000009", "0.1"),

    ("-0.99999999", "-0.00000001"),
    ("-0.09999999", "-0.0000001"),
    ("-0.00999999", "-0.000001"),
    ("-0.00099999", "-0.00001"),
    ("-0.00009999", "-0.0001"),
    ("-0.00000999", "-0.001"),
    ("-0.00000099", "-0.01"),
    ("-0.00000009", "-0.1"),


    ("0.00000005", "0.19999999"),
    ("0.00000002", "0.49999999"),
    ("0.00000005", "-0.19999999"),
    ("0.00000002", "-0.49999999"),
    ("-0.00000005", "0.19999999"),
    ("-0.00000002", "0.49999999"),
    ("-0.00000005", "-0.19999999"),
    ("-0.00000002", "-0.49999999"),
]


MulFix64NegOverflowTests = [
    ("MinFix64", "1.00000001"),
    ("MinFix64", "1.0000001"),
    ("MinFix64", "1.1"),
    ("MinFix64", "2.0"),
    ("MinFix64", "10"),
    ("MinFix64", "100"),
    ("MinFix64", "1000"),
    ("MinFix64", "10000"),
    ("MinFix64", "100000"),
    ("MinFix64", "1000000"),
    ("MinFix64", "10000000"),
    ("MinFix64", "100000000"),
    ("MinFix64", "1000000000"),
    ("MinFix64", "MaxFix64"),
    ("HalfMaxFix64", "HalfMinFix64 + 1.0"),
    ("HalfMaxFix64", "HalfMinFix64 + 0.1"),
    ("HalfMaxFix64", "HalfMinFix64 + 0.01"),
    ("HalfMaxFix64", "HalfMinFix64 + 0.001"),
    ("HalfMaxFix64", "HalfMinFix64 + 0.0001"),
    ("HalfMaxFix64", "HalfMinFix64 + 0.00001"),
    ("HalfMaxFix64", "HalfMinFix64 + 0.000001"),
    ("HalfMaxFix64", "HalfMinFix64 + 0.0000001"),
]

def generate_mul_ufix64_tests():
    lines = ["var MulUFix64Tests = []struct{ A, B, Expected uint64 }{"]
    for a_str, b_str in MulUFix64Tests:
        a = parseInput64(a_str)
        b = parseInput64(b_str)
        c = a * b
        a_hex = go_hex64(to_ufix64(a))
        b_hex = go_hex64(to_ufix64(b))
        c_hex = go_hex64(to_ufix64(c))
        comment = f"// {a_str} * {b_str} = {c}"
        pad = " " * (60 - len(f"    {{{a_hex}, {b_hex}, {c_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}, {c_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_mul_ufix64_overflow_tests():
    lines = ["var MulUFix64OverflowTests = []struct{ A, B uint64 }{"]
    for a_str, b_str in MulUFix64OverflowTests:
        a = parseInput64(a_str)
        b = parseInput64(b_str)
        a_hex = go_hex64(to_ufix64(a))
        b_hex = go_hex64(to_ufix64(b))
        comment = f"// {a_str} * {b_str} = overflow"
        pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_mul_ufix64_underflow_tests():
    lines = ["var MulUFix64UnderflowTests = []struct{ A, B uint64 }{"]
    for a_str, b_str in MulUFix64UnderflowTests:
        a = parseInput64(a_str)
        b = parseInput64(b_str)
        a_hex = go_hex64(to_ufix64(a))
        b_hex = go_hex64(to_ufix64(b))
        comment = f"// {a_str} * {b_str} = underflow"
        pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_mul_fix64_tests():
    lines = ["var MulFix64Tests = []struct{ A, B, Expected uint64 }{"]
    for a_str, b_str in MulFix64Tests:
        a = parseInput64(a_str)
        b = parseInput64(b_str)
        c = a * b
        a_hex = go_hex64(to_fix64(a))
        b_hex = go_hex64(to_fix64(b))
        c_hex = go_hex64(to_fix64(c))
        comment = f"// {a_str} * {b_str} = {c}"
        pad = " " * (60 - len(f"    {{{a_hex}, {b_hex}, {c_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}, {c_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_mul_fix64_overflow_tests():
    lines = ["var MulFix64OverflowTests = []struct{ A, B uint64 }{"]
    for a_str, b_str in MulFix64OverflowTests:
        a = parseInput64(a_str)
        b = parseInput64(b_str)
        a_hex = go_hex64(to_fix64(a))
        b_hex = go_hex64(to_fix64(b))
        comment = f"// {a_str} * {b_str} = overflow"
        pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_mul_fix64_underflow_tests():
    lines = ["var MulFix64UnderflowTests = []struct{ A, B uint64 }{"]
    for a_str, b_str in MulFix64UnderflowTests:
        a = parseInput64(a_str)
        b = parseInput64(b_str)
        a_hex = go_hex64(to_fix64(a))
        b_hex = go_hex64(to_fix64(b))
        comment = f"// {a_str} * {b_str} = underflow"
        pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_mul_fix64_neg_overflow_tests():
    lines = ["var MulFix64NegOverflowTests = []struct{ A, B uint64 }{"]
    for a_str, b_str in MulFix64NegOverflowTests:
        a = parseInput64(a_str)
        b = parseInput64(b_str)
        a_hex = go_hex64(to_fix64(a))
        b_hex = go_hex64(to_fix64(b))
        comment = f"// {a_str} * {b_str} = neg overflow"
        pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def main():
    go_lines = [
        "// Code generated by testgen/mul.py; DO NOT EDIT.",
        "package fixedPoint",
        "",
    ]
    go_lines.extend(generate_mul_ufix64_tests())
    go_lines.extend(generate_mul_ufix64_overflow_tests())
    go_lines.extend(generate_mul_ufix64_underflow_tests())
    go_lines.extend(generate_mul_fix64_tests())
    go_lines.extend(generate_mul_fix64_overflow_tests())
    go_lines.extend(generate_mul_fix64_underflow_tests())
    go_lines.extend(generate_mul_fix64_neg_overflow_tests())
    print('\n'.join(go_lines))

if __name__ == "__main__":
    main()
