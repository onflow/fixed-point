# div64.py
# Generates Go test data for UFix128 and Fix128 division (including overflow/div by zero)

from decimal import Decimal, getcontext
from utils import *

DivUFix128Tests = [
    # Simple cases
    ("1.0", "1.0"),
    ("1.0", "1e8"),
    ("10.0", "100000001.0"),
    ("1e8", "1e8"),
    ("1e8", "99999999.0"),
    ("1e8", "100000001.0"),
    ("5", "1"),
    ("5", "2"),
    ("5", "3"),
    ("5", "4"),
    ("5", "5"),
    ("5", "6"),
    ("5", "7"),
    ("5", "8"),
    ("5", "9"),
    ("5", "10"),

    # Random cases
    ("123.456", "789.012"),
    ("456.789", "123.456"),
    ("0.000123", "0.000456"),
    ("0.000789", "0.000321"),
    ("98765.4321", "12345.6789"),
    ("31415.9265", "27182.8182"),
    ("1.23456789", "0.98765432"),
    ("0.99999999", "0.00000001"),
    ("1e-9", "MaxUFix128"),

    # Near the square root of 2^128
    ("MaxUFix128", "18446744.073709551616"),
    ("MaxUFix128", "18446744.073709551615999999999999"),

    # Starting big
    ("MaxUFix128", "1"),
    ("MaxUFix128", "10"),
    ("MaxUFix128", "100"),
    ("MaxUFix128", "1000"),
    ("MaxUFix128", "10000"),
    ("MaxUFix128", "100000"),
    ("MaxUFix128", "1000000"),
    ("MaxUFix128", "10000000"),
    ("MaxUFix128", "100000000"),
    ("MaxUFix128", "1000000000"),
    ("MaxUFix128", "10000000000"),
    ("MaxUFix128", "100000000000"),

    ("MaxUFix128 - 1", "1"),
    ("HalfMaxUFix128", "0.5"),

    ("MaxUFix128", "1.0"),
    ("MaxUFix128", "2.0"),
    ("MaxUFix128", "MaxUFix128"),
    ("HalfMaxUFix128", "2.0"),
    ("HalfMaxUFix128", "HalfMaxUFix128"),
    ("HalfMaxUFix128 + 1e-24", "HalfMaxUFix128"),
    ("HalfMaxUFix128", "HalfMaxUFix128 + 1e-24"),

    # Things that divide to the smallest UFix128
    ("1e-24", "1e0"),
    ("1e-23", "1e1"),
    ("1e-22", "1e2"),
    ("1e-21", "1e3"),
    ("1e-20", "1e4"),
    ("1e-15", "1e9"),
    ("5e-24", "5"),
    ("2e-24", "2"),

    # Same as above, but with a SLIGHTLY smaller divisor
    ("1e-24", "0.999999999999999999999999"),
    ("1e-23", "9.999999999999999999999999"),
    ("1e-22", "99.999999999999999999999999"),
    ("1e-21", "999.999999999999999999999999"),
    ("1e-20", "9999.999999999999999999999999"),
    ("1e-15", "999999999.999999999999999999999999"),
    ("5e-24", "4.999999999999999999999999"),
    ("2e-24", "1.999999999999999999999999"),

    # Should divide to the largest UFix128
    ("340282366920938.463463374607431768211455", "1.0"),
    ("34028236692093.846346337460743176821145", "0.1"),
    ("3402823669209.384634633746074317682114", "0.01"),
    ("340282366920.938463463374607431768211", "0.001"),
    ("34028236692.093846346337460743176821", "0.0001"),
    ("3402823669.209384634633746074317682", "0.00001"),
    ("340282366.920938463463374607431768", "0.000001"),
    ("34028236.692093846346337460743176", "0.0000001"),
    ("3402823.669209384634633746074317", "0.00000001"),
    ("340282.366920938463463374607431", "0.000000001"),
    ("34028.236692093846346337460743", "0.0000000001"),
    ("3402.823669209384634633746074", "0.00000000001"),
    ("340.282366920938463463374607", "0.000000000001"),
    ("34.028236692093846346337460", "0.0000000000001"),
    ("3.402823669209384634633746", "0.00000000000001"),
    ("0.34028236692093846346337", "0.000000000000001"),
]

DivUFix128OverflowTests = [
    # Overflow cases for UFix128 division
    ("MaxUFix128", "0.999999999999999999999999"),
    ("MaxUFix128", "0.1"),
    ("MaxUFix128", "0.01"),
    ("MaxUFix128", "0.001"),
    ("MaxUFix128", "0.00001"),
    ("MaxUFix128", "0.0000001"),
    ("MaxUFix128", "1e-24"),

    ("340282366920938.463463374607431768211455", "0.999999999999999999999999"),
    ("34028236692093.846346337460743176821145", "0.099999999999999999999999"),
    ("3402823669209.384634633746074317682114", "0.009999999999999999999999"),
    ("340282366920.938463463374607431768211", "0.000999999999999999999999"),
    ("34028236692.093846346337460743176821", "0.000099999999999999999999"),
    ("3402823669.209384634633746074317682", "0.000009999999999999999999"),
    ("340282366.920938463463374607431768", "0.000000999999999999999999"),
    ("34028236.692093846346337460743176", "0.000000099999999999999999"),
    ("3402823.669209384634633746074317", "0.000000009999999999999999"),
    ("340282.366920938463463374607431", "0.000000000999999999999999"),
    ("34028.236692093846346337460743", "0.000000000099999999999999"),
    ("3402.823669209384634633746074", "0.000000000009999999999999"),
    ("340.282366920938463463374607", "0.000000000000999999999999"),
    ("34.028236692093846346337460", "0.000000000000099999999999"),
    ("3.402823669209384634633746", "0.000000000000009999999999"),
    ("0.34028236692093846346337", "0.000000000000000999999999"),

    ("HalfMaxUFix128", "1e-24"),
    ("HalfMaxUFix128", "0.00000001"),
    ("HalfMaxUFix128", "0.0000001"),
    ("HalfMaxUFix128", "0.000001"),
    ("HalfMaxUFix128", "0.0001"),
    ("HalfMaxUFix128", "0.001"),
    ("HalfMaxUFix128", "0.01"),
    ("HalfMaxUFix128", "0.1"),
]

DivUFix128UnderflowTests = [
    ("1e-24", "1.000000000000000000000001"),
    ("1e-24", "1.1"),
    ("1e-24", "2.0"),
    ("1e-24", "10.0"),
    ("1e-24", "100.0"),
    ("1e-24", "1000.0"),
    ("1e-24", "100000000.0"),
    ("1e-10", "MaxUFix128"),
    ("1e-11", "1e14"),
]

DivUFix128DivByZeroTests = [
    ("1.0", "0.0"),
    ("0.0", "0.0"),
    ("MaxUFix128", "0.0"),
    ("HalfMaxUFix128", "0.0"),
]


DivFix128Tests = [
    # Simple cases
    ("1.0", "1.0"),
    ("1.0", "1e8"),
    ("1.1", "100000001.0"),
    ("10.0", "100000001.0"),
    ("1e8", "1e8"),
    ("1e8", "99999999.0"),
    ("1e8", "100000001.0"),
    ("5", "-1"),
    ("5", "-2"),
    ("5", "-3"),
    ("5", "-4"),
    ("5", "-5"),
    ("5", "-6"),
    ("5", "-7"),
    ("5", "-8"),
    ("5", "-9"),
    ("5", "-10"),
    ("1.0", "0.5"),
    ("1.0", "2.0"),
    ("2.0", "1.0"),
    ("1.0", "-2.0"),
    ("-2.0", "2.0"),
    ("-2.0", "-2.0"),
    ("1.0", "99999999.0"),

    # Random cases
    ("123.456", "789.012"),
    ("456.789", "123.456"),
    ("0.000123", "0.000456"),
    ("0.000789", "0.000321"),
    ("98765.4321", "12345.6789"),
    ("31415.9265", "27182.8182"),
    ("1.23456789", "0.98765432"),
    ("0.99999999", "0.00000001"),
    ("123.456", "789.012"),
    ("-456.789", "123.456"),
    ("0.000123", "0.000456"),
    ("-0.000789", "0.000321"),
    ("98765.4321", "-12345.6789"),
    ("31415.9265", "27182.8182"),
    ("-27182.8182", "-31415.9265"),
    ("1.23456789", "-0.98765432"),
    ("0.99999999", "0.00000001"),
    ("-0.99999999", "-0.00000001"),

    # Near the square root of 2^127
    ("MaxFix128", "13043817.825332782212349"),
    ("MaxFix128", "13043817.825332782212349571806252"),
    ("MaxFix128", "-13043817.825332782212349"),
    ("MaxFix128", "-13043817.825332782212349571806252"),

    ("MinFix128", "13043817.825332782212349"),
    ("MinFix128", "13043817.825332782212349571806252"),
    ("MinFix128", "-13043817.825332782212349"),
    ("MinFix128", "-13043817.825332782212349571806252"),

    # Starting big
    ("MaxFix128", "1"),
    ("MaxFix128", "10"),
    ("MaxFix128", "100"),
    ("MaxFix128", "1000"),
    ("MaxFix128", "10000"),
    ("MaxFix128", "100000"),
    ("MaxFix128", "1000000"),
    ("MaxFix128", "10000000"),
    ("MaxFix128", "100000000"),
    ("MaxFix128", "1000000000"),
    ("MaxFix128", "10000000000"),
    ("MaxFix128", "1e14"),

    ("MaxFix128", "-1"),
    ("MaxFix128", "-10"),
    ("MaxFix128", "-100"),
    ("MaxFix128", "-1000"),
    ("MaxFix128", "-10000"),
    ("MaxFix128", "-100000"),
    ("MaxFix128", "-1000000"),
    ("MaxFix128", "-10000000"),
    ("MaxFix128", "-100000000"),
    ("MaxFix128", "-1000000000"),
    ("MaxFix128", "-10000000000"),
    ("MaxFix128", "-1e14"),

    ("MinFix128", "1"),
    ("MinFix128", "10"),
    ("MinFix128", "100"),
    ("MinFix128", "1000"),
    ("MinFix128", "10000"),
    ("MinFix128", "100000"),
    ("MinFix128", "1000000"),
    ("MinFix128", "10000000"),
    ("MinFix128", "100000000"),
    ("MinFix128", "1000000000"),
    ("MinFix128", "10000000000"),
    ("MinFix128", "1e14"),

    ("MinFix128 + 1e-24", "-1"),
    ("MinFix128", "-10"),
    ("MinFix128", "-100"),
    ("MinFix128", "-1000"),
    ("MinFix128", "-10000"),
    ("MinFix128", "-100000"),
    ("MinFix128", "-1000000"),
    ("MinFix128", "-10000000"),
    ("MinFix128", "-100000000"),
    ("MinFix128", "-1000000000"),
    ("MinFix128", "-10000000000"),
    ("MinFix128", "-1e14"),

    ("MaxFix128", "1"),
    ("HalfMaxFix128", "0.5"),
    ("MaxFix128", "-1"),
    ("HalfMaxFix128", "-0.5"),
    ("MinFix128", "1"),
    ("HalfMinFix128 + 1e-8", "0.5"),
    ("MinFix128 + 1e-24", "-1"),
    ("HalfMinFix128 + 1e-8", "-0.5"),

    ("MaxFix128", "1.0"),
    ("MaxFix128", "2.0"),
    ("MaxFix128", "MaxFix128"),
    ("MinFix128", "1.0"),
    ("MinFix128", "2.0"),
    ("MinFix128", "MinFix128"),

    # Things that divide to the smallest Fix128 (in magnitude)
    ("1e-24", "1e0"),
    ("1e-23", "1e1"),
    ("1e-22", "1e2"),
    ("1e-21", "1e3"),
    ("1e-20", "1e4"),
    ("1e-15", "1e9"),
    ("5e-24", "5"),
    ("2e-24", "2"),

    ("1e-24", "-1e0"),
    ("1e-23", "-1e1"),
    ("1e-22", "-1e2"),
    ("1e-21", "-1e3"),
    ("1e-20", "-1e4"),
    ("1e-15", "-1e9"),
    ("5e-24", "-5"),
    ("2e-24", "-2"),

    ("-1e-24", "1e0"),
    ("-1e-23", "1e1"),
    ("-1e-22", "1e2"),
    ("-1e-21", "1e3"),
    ("-1e-20", "1e4"),
    ("-1e-15", "1e9"),
    ("-5e-24", "5"),
    ("-2e-24", "2"),

    ("-1e-24", "-1e0"),
    ("-1e-23", "-1e1"),
    ("-1e-22", "-1e2"),
    ("-1e-21", "-1e3"),
    ("-1e-20", "-1e4"),
    ("-1e-15", "-1e9"),
    ("-5e-24", "-5"),
    ("-2e-24", "-2"),

    # Same as above, but with a SLIGHTLY smaller divisor
    ("1e-24", "0.999999999999999999999999"),
    ("1e-23", "9.999999999999999999999999"),
    ("1e-22", "99.999999999999999999999999"),
    ("1e-21", "999.999999999999999999999999"),
    ("1e-20", "9999.999999999999999999999999"),
    ("1e-15", "999999999.999999999999999999999999"),
    ("5e-24", "4.999999999999999999999999"),
    ("2e-24", "1.999999999999999999999999"),

    ("1e-24", "-0.999999999999999999999999"),
    ("1e-23", "-9.999999999999999999999999"),
    ("1e-22", "-99.999999999999999999999999"),
    ("1e-21", "-999.999999999999999999999999"),
    ("1e-20", "-9999.999999999999999999999999"),
    ("1e-15", "-999999999.999999999999999999999999"),
    ("5e-24", "-4.999999999999999999999999"),
    ("2e-24", "-1.999999999999999999999999"),

    ("-1e-24", "0.999999999999999999999999"),
    ("-1e-23", "9.999999999999999999999999"),
    ("-1e-22", "99.999999999999999999999999"),
    ("-1e-21", "999.999999999999999999999999"),
    ("-1e-20", "9999.999999999999999999999999"),
    ("-1e-15", "999999999.999999999999999999999999"),
    ("-5e-24", "4.999999999999999999999999"),
    ("-2e-24", "1.999999999999999999999999"),

    ("-1e-24", "-0.999999999999999999999999"),
    ("-1e-23", "-9.999999999999999999999999"),
    ("-1e-22", "-99.999999999999999999999999"),
    ("-1e-21", "-999.999999999999999999999999"),
    ("-1e-20", "-9999.999999999999999999999999"),
    ("-1e-15", "-999999999.999999999999999999999999"),
    ("-5e-24", "-4.999999999999999999999999"),
    ("-2e-24", "-1.999999999999999999999999"),

    # Should divide to the largest Fix128 in magnitude (min and max)
    ("170141183460469.231731687303715884105727", "1.0"),
    ("17014118346046.923173168730371588410572", "0.1"),
    ("1701411834604.692317316873037158841057", "0.01"),
    ("170141183460.469231731687303715884105", "0.001"),
    ("17014118346.046923173168730371588410", "0.0001"),
    ("1701411834.604692317316873037158841", "0.00001"),
    ("170141183.460469231731687303715884", "0.000001"),
    ("17014118.346046923173168730371588", "0.0000001"),
    ("1701411.834604692317316873037158", "0.00000001"),
    ("170141.183460469231731687303715", "0.000000001"),
    ("17014.118346046923173168730371", "0.0000000001"),
    ("1701.411834604692317316873037", "0.00000000001"),
    ("170.141183460469231731687303", "0.000000000001"),
    ("17.014118346046923173168730", "0.0000000000001"),
    ("1.701411834604692317316873", "0.00000000000001"),

    ("170141183460469.231731687303715884105727", "-1.0"),
    ("17014118346046.923173168730371588410572", "-0.1"),
    ("1701411834604.692317316873037158841057", "-0.01"),
    ("170141183460.469231731687303715884105", "-0.001"),
    ("17014118346.046923173168730371588410", "-0.0001"),
    ("1701411834.604692317316873037158841", "-0.00001"),
    ("170141183.460469231731687303715884", "-0.000001"),
    ("17014118.346046923173168730371588", "-0.0000001"),
    ("1701411.834604692317316873037158", "-0.00000001"),
    ("170141.183460469231731687303715", "-0.000000001"),
    ("17014.118346046923173168730371", "-0.0000000001"),
    ("1701.411834604692317316873037", "-0.00000000001"),
    ("170.141183460469231731687303", "-0.000000000001"),
    ("17.014118346046923173168730", "-0.0000000000001"),
    ("1.701411834604692317316873", "-0.00000000000001"),

    ("-170141183460469.231731687303715884105727", "1.0"),
    ("-17014118346046.923173168730371588410572", "0.1"),
    ("-1701411834604.692317316873037158841057", "0.01"),
    ("-170141183460.469231731687303715884105", "0.001"),
    ("-17014118346.046923173168730371588410", "0.0001"),
    ("-1701411834.604692317316873037158841", "0.00001"),
    ("-170141183.460469231731687303715884", "0.000001"),
    ("-17014118.346046923173168730371588", "0.0000001"),
    ("-1701411.834604692317316873037158", "0.00000001"),
    ("-170141.183460469231731687303715", "0.000000001"),
    ("-17014.118346046923173168730371", "0.0000000001"),
    ("-1701.411834604692317316873037", "0.00000000001"),
    ("-170.141183460469231731687303", "0.000000000001"),
    ("-17.014118346046923173168730", "0.0000000000001"),
    ("-1.701411834604692317316873", "0.00000000000001"),

    ("-170141183460469.231731687303715884105727", "-1.0"),
    ("-17014118346046.923173168730371588410572", "-0.1"),
    ("-1701411834604.692317316873037158841057", "-0.01"),
    ("-170141183460.469231731687303715884105", "-0.001"),
    ("-17014118346.046923173168730371588410", "-0.0001"),
    ("-1701411834.604692317316873037158841", "-0.00001"),
    ("-170141183.460469231731687303715884", "-0.000001"),
    ("-17014118.346046923173168730371588", "-0.0000001"),
    ("-1701411.834604692317316873037158", "-0.00000001"),
    ("-170141.183460469231731687303715", "-0.000000001"),
    ("-17014.118346046923173168730371", "-0.0000000001"),
    ("-1701.411834604692317316873037", "-0.00000000001"),
    ("-170.141183460469231731687303", "-0.000000000001"),
    ("-17.014118346046923173168730", "-0.0000000000001"),
    ("-1.701411834604692317316873", "-0.00000000000001"),
]

# Overflow and DivByZero test data for Fix128 division
DivFix128OverflowTests = [
    ("MinFix128", "-1e-24"),
    ("MinFix128", "-0.00000001"),
    ("MinFix128", "-0.0000001"),
    ("MinFix128", "-0.000001"),
    ("MinFix128", "-0.0001"),
    ("MinFix128", "-0.001"),
    ("MinFix128", "-0.01"),
    ("MinFix128", "-0.1"),
    ("MinFix128", "-0.999999999999999999999999"),
    ("HalfMinFix128", "-1e-24"),
    ("HalfMinFix128", "-0.00000001"),
    ("HalfMinFix128", "-0.0000001"),
    ("HalfMinFix128", "-0.000001"),
    ("HalfMinFix128", "-0.0001"),
    ("HalfMinFix128", "-0.001"),
    ("HalfMinFix128", "-0.01"),
    ("HalfMinFix128", "-0.1"),
    ("MaxFix128", "1e-24"),
    ("MaxFix128", "0.00000001"),
    ("MaxFix128", "0.0000001"),
    ("MaxFix128", "0.000001"),
    ("MaxFix128", "0.0001"),
    ("MaxFix128", "0.001"),
    ("MaxFix128", "0.01"),
    ("MaxFix128", "0.1"),
    ("HalfMaxFix128", "1e-24"),
    ("HalfMaxFix128", "0.00000001"),
    ("HalfMaxFix128", "0.0000001"),
    ("HalfMaxFix128", "0.000001"),
    ("HalfMaxFix128", "0.0001"),
    ("HalfMaxFix128", "0.001"),
    ("HalfMaxFix128", "0.01"),
    ("HalfMaxFix128", "0.1"),
]

DivFix128NegOverflowTests = [
    ("MinFix128", "1e-24"),
    ("MinFix128", "0.00000001"),
    ("MinFix128", "0.0000001"),
    ("MinFix128", "0.000001"),
    ("MinFix128", "0.0001"),
    ("MinFix128", "0.001"),
    ("MinFix128", "0.01"),
    ("MinFix128", "0.1"),
    ("MinFix128", "0.99999999"),
    ("HalfMinFix128", "1e-24"),
    ("HalfMinFix128", "0.00000001"),
    ("HalfMinFix128", "0.0000001"),
    ("HalfMinFix128", "0.000001"),
    ("HalfMinFix128", "0.0001"),
    ("HalfMinFix128", "0.001"),
    ("HalfMinFix128", "0.01"),
    ("HalfMinFix128", "0.1"),
    ("MaxFix128", "-1e-24"),
    ("MaxFix128", "-0.00000001"),
    ("MaxFix128", "-0.0000001"),
    ("MaxFix128", "-0.000001"),
    ("MaxFix128", "-0.0001"),
    ("MaxFix128", "-0.001"),
    ("MaxFix128", "-0.01"),
    ("MaxFix128", "-0.1"),
    ("HalfMaxFix128", "-1e-24"),
    ("HalfMaxFix128", "-0.00000001"),
    ("HalfMaxFix128", "-0.0000001"),
    ("HalfMaxFix128", "-0.000001"),
    ("HalfMaxFix128", "-0.0001"),
    ("HalfMaxFix128", "-0.001"),
    ("HalfMaxFix128", "-0.01"),
    ("HalfMaxFix128", "-0.1"),
]


DivFix128UnderflowTests = [
    # Underflow cases for Fix128 division (results too small to represent)
    ("1e-24", "1.000000000000000000000001"),
    ("1e-24", "1.1"),
    ("1e-24", "2.0"),
    ("1e-24", "10.0"),
    ("1e-24", "100.0"),
    ("1e-24", "1000.0"),
    ("1e-24", "100000000.0"),
    ("1e-10", "MaxFix128"),
    ("1e-11", "1e14"),

    ("1e-24", "-1.000000000000000000000001"),
    ("1e-24", "-1.1"),
    ("1e-24", "-2.0"),
    ("1e-24", "-10.0"),
    ("1e-24", "-100.0"),
    ("1e-24", "-1000.0"),
    ("1e-24", "-100000000.0"),
    ("1e-10",  "MinFix128"),
    ("1e-11", "-1e14"),

    ("-1e-24", "1.000000000000000000000001"),
    ("-1e-24", "1.1"),
    ("-1e-24", "2.0"),
    ("-1e-24", "10.0"),
    ("-1e-24", "100.0"),
    ("-1e-24", "1000.0"),
    ("-1e-24", "100000000.0"),
    ("-1e-10", "MaxFix128"),
    ("-1e-11", "1e14"),

    ("-1e-24", "-1.000000000000000000000001"),
    ("-1e-24", "-1.1"),
    ("-1e-24", "-2.0"),
    ("-1e-24", "-10.0"),
    ("-1e-24", "-100.0"),
    ("-1e-24", "-1000.0"),
    ("-1e-24", "-100000000.0"),
    ("-1e-10",  "MinFix128"),
    ("-1e-11", "-1e14"),
]

DivFix128DivByZeroTests = [
    ("1.0", "0.0"),
    ("0.0", "0.0"),
    ("MaxFix128", "0.0"),
    ("MinFix128", "0.0"),
    ("HalfMaxFix128", "0.0"),
    ("HalfMinFix128", "0.0"),
]


def generate_div_ufix128_tests():
    lines = ["var DivUFix128Tests = []struct{ A, B, Expected raw128 }{"]
    for a_str, b_str in DivUFix128Tests:
        a = parseInput128(a_str)
        b = parseInput128(b_str)
        try:
            c = a / b
        except Exception:
            c = Decimal('0')
        a_hex = go_hex128(to_ufix128(a))
        b_hex = go_hex128(to_ufix128(b))
        c_hex = go_hex128(to_ufix128(c))
        comment = f"// {a_str} / {b_str} = {c}"
        pad = " " * (60 - len(f"    {{{a_hex}, {b_hex}, {c_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}, {c_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_div_ufix128_overflow_tests():
    lines = ["var DivUFix128OverflowTests = []struct{ A, B raw128 }{"]
    for a_str, b_str in DivUFix128OverflowTests:
        a = parseInput128(a_str)
        b = parseInput128(b_str)
        a_hex = go_hex128(to_ufix128(a))
        b_hex = go_hex128(to_ufix128(b))
        comment = f"// {a_str} / {b_str} = overflow"
        pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_div_ufix128_underflow_tests():
    lines = ["var DivUFix128UnderflowTests = []struct{ A, B raw128 }{"]
    for a_str, b_str in DivUFix128UnderflowTests:
        a = parseInput128(a_str)
        b = parseInput128(b_str)
        a_hex = go_hex128(to_ufix128(a))
        b_hex = go_hex128(to_ufix128(b))
        comment = f"// {a_str} / {b_str} = underflow"
        pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_div_ufix128_divbyzero_tests():
    lines = ["var DivUFix128DivByZeroTests = []struct{ A, B raw128 }{"]
    for a_str, b_str in DivUFix128DivByZeroTests:
        a = parseInput128(a_str)
        b = parseInput128(b_str)
        a_hex = go_hex128(to_ufix128(a))
        b_hex = go_hex128(to_ufix128(b))
        comment = f"// {a_str} / {b_str} = div by zero"
        pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_div_fix128_tests():
    lines = ["var DivFix128Tests = []struct{ A, B, Expected raw128 }{"]
    for a_str, b_str in DivFix128Tests:
        a = parseInput128(a_str)
        b = parseInput128(b_str)
        try:
            c = a / b
        except Exception:
            c = Decimal('0')
        a_hex = go_hex128(to_fix128(a))
        b_hex = go_hex128(to_fix128(b))
        c_hex = go_hex128(to_fix128(c))
        comment = f"// {a_str} / {b_str} = {c}"
        pad = " " * (60 - len(f"    {{{a_hex}, {b_hex}, {c_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}, {c_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_div_fix128_overflow_tests():
    lines = ["var DivFix128OverflowTests = []struct{ A, B raw128 }{"]
    for a_str, b_str in DivFix128OverflowTests:
        a = parseInput128(a_str)
        b = parseInput128(b_str)
        a_hex = go_hex128(to_fix128(a))
        b_hex = go_hex128(to_fix128(b))
        comment = f"// {a_str} / {b_str} = overflow"
        pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_div_fix128_neg_overflow_tests():
    lines = ["var DivFix128NegOverflowTests = []struct{ A, B raw128 }{"]
    for a_str, b_str in DivFix128NegOverflowTests:
        a = parseInput128(a_str)
        b = parseInput128(b_str)
        a_hex = go_hex128(to_fix128(a))
        b_hex = go_hex128(to_fix128(b))
        comment = f"// {a_str} / {b_str} = negative overflow"
        pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_div_fix128_underflow_tests():
    lines = ["var DivFix128UnderflowTests = []struct{ A, B raw128 }{"]
    for a_str, b_str in DivFix128UnderflowTests:
        a = parseInput128(a_str)
        b = parseInput128(b_str)
        a_hex = go_hex128(to_fix128(a))
        b_hex = go_hex128(to_fix128(b))
        comment = f"// {a_str} / {b_str} = underflow"
        pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def generate_div_fix128_divbyzero_tests():
    lines = ["var DivFix128DivByZeroTests = []struct{ A, B raw128 }{"]
    for a_str, b_str in DivFix128DivByZeroTests:
        a = parseInput128(a_str)
        b = parseInput128(b_str)
        a_hex = go_hex128(to_fix128(a))
        b_hex = go_hex128(to_fix128(b))
        comment = f"// {a_str} / {b_str} = div by zero"
        pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

def main():
    getcontext().prec = 100  # Set precision for Decimal operations

    go_lines = [
        "// Code generated by testgen/div.py; DO NOT EDIT.",
        "package fixedPoint",
        "",
    ]
    go_lines.extend(generate_div_ufix128_tests())
    go_lines.extend(generate_div_ufix128_overflow_tests())
    go_lines.extend(generate_div_ufix128_underflow_tests())
    go_lines.extend(generate_div_ufix128_divbyzero_tests())
    go_lines.extend(generate_div_fix128_tests())
    go_lines.extend(generate_div_fix128_overflow_tests())
    go_lines.extend(generate_div_fix128_neg_overflow_tests())
    go_lines.extend(generate_div_fix128_underflow_tests())
    go_lines.extend(generate_div_fix128_divbyzero_tests())
    print('\n'.join(go_lines))

if __name__ == "__main__":
    main()
