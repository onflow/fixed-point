# div64.py
# Generates Go test data for UFix64 and Fix64 fused multiple/divide

from decimal import Decimal, getcontext
from utils import to_ufix64, to_fix64, go_hex64, FIX64_SCALE, MASK64, parseInput64

getcontext().prec = 50

FMDUFix64Tests = [
    # Simple cases
    ("1.0", "1.0", "1.0"),
    ("1.0", "1e8", "1.0"),
    ("1.0", "1e8", "1e8"),
    ("10.0", "100000001.0", "1.0"),
    ("1e8", "1e8", "1e5"),
    ("1", "1e8", "99999999.0"),
    ("1", "1e8", "100000001.0"),

    ("5", "1", "1"),
    ("5", "2", "1"),
    ("5", "3", "1"),
    ("5", "4", "1"),
    ("5", "5", "1"),
    ("5", "6", "1"),
    ("5", "7", "1"),
    ("5", "8", "1"),
    ("5", "9", "1"),
    ("5", "10", "1"),

    ("5", "1", "1"),
    ("5", "2", "2"),
    ("5", "3", "3"),
    ("5", "4", "4"),
    ("5", "5", "5"),
    ("5", "6", "6"),
    ("5", "7", "7"),
    ("5", "8", "8"),
    ("5", "9", "9"),
    ("5", "10", "10"),

    # Random cases
    ("12345678.12345678", "87654321.87654321", "23456789.23456789"),
    ("98765432.12345678", "12345678.87654321", "34567890.34567890"),
    ("54321098.76543210", "67890123.45678901", "45678901.56789012"),
    ("23456789.87654321", "34567890.12345678", "56789012.67890123"),
    ("87654321.23456789", "43210987.65432109", "67890123.78901234"),
    ("34567890.98765432", "56789012.34567890", "78901234.89012345"),
    ("65432109.87654321", "21098765.43210987", "89012345.90123456"),
    ("78901234.12345678", "32109876.54321098", "90123456.01234567"),
    ("21098765.98765432", "54321098.12345678", "12345678.23456789"),
    ("43210987.65432109", "65432109.87654321", "23456789.34567890"),

    # Values close to 1
    ("0.99999999", "1.00000001", "1.00000002"),
    ("1.00000001", "0.99999999", "0.99999998"),
    ("1.00000001", "1.00000002", "0.99999999"),
    ("0.99999998", "0.99999999", "1.00000001"),
    ("1.00000002", "1.00000001", "0.99999999"),
    ("1.00000001", "1.0", "0.99999999"),
    ("1.0", "0.99999999", "1.00000001"),
    ("0.99999999", "0.99999998", "1.00000002"),
    ("1.00000001", "1.00000001", "1.00000001"),
    ("0.99999999", "0.99999999", "0.99999999"),
    ("1.00000001", "1.00000000", "0.99999999"),
    ("0.99999999", "1.00000000", "1.00000001"),
    ("1.00000002", "0.99999999", "1.00000001"),
    ("0.99999998", "1.00000002", "1.00000000"),
    ("1.00000000", "0.99999998", "1.00000002"),
    ("1.00000001", "0.99999998", "1.00000000"),
    ("0.99999998", "1.00000001", "1.00000002"),
    ("1.00000002", "1.00000000", "0.99999998"),
    ("1.00000000", "1.00000002", "0.99999998"),
    ("0.99999999", "1.00000002", "1.00000000"),


    # Near the square root of 2^64
    ("1", "MaxUFix64", "429496.7296"),
    ("1", "MaxUFix64", "429496.7295"),
    ("1", "MaxUFix64", "429496.72959999"),

    ("MaxUFix64", "1", "429496.7296"),
    ("MaxUFix64", "1", "429496.7295"),
    ("MaxUFix64", "1", "429496.72959999"),

    # Would overflow if not for the fused multiply/divide
    ("MaxUFix64", "1e8", "1e8"),
    ("MaxUFix64", "1e8", "1e9"),
    ("MaxUFix64", "1e8", "1e10"),
    ("MaxUFix64", "1e8", "1e11"),

    ("MaxUFix64", "1e8", "1e11"),
    ("MaxUFix64", "1e9", "1e11"),
    ("MaxUFix64", "1e10", "1e11"),
    ("MaxUFix64", "1e11", "1e11"),

    # Would underflow if not for the fused multiply/divide
    ("1", "HalfMaxUFix64", "MaxUFix64"),
    ("HalfMaxUFix64", "1", "MaxUFix64"),
    ("1", "MaxUFix64", "MaxUFix64"),
    ("MaxUFix64", "1", "MaxUFix64"),
    ("1e-8", "MaxUFix64", "MaxUFix64"),
    ("MaxUFix64", "1e-8", "MaxUFix64"),

    ("1e-8", "1e-8", "1e-8"),
    ("1", "1e-8", "1e-8"),
    ("1e-8", "1", "1e-8"),

    ("MaxUFix64", "MaxUFix64", "MaxUFix64"),
    ("HalfMaxUFix64", "HalfMaxUFix64", "HalfMaxUFix64"),
    ("MaxUFix64", "HalfMaxUFix64", "HalfMaxUFix64"),
    ("HalfMaxUFix64", "MaxUFix64", "HalfMaxUFix64"),
    ("HalfMaxUFix64", "HalfMaxUFix64", "MaxUFix64"),

    # Things that result to the smallest UFix64
    ("1", "0.00000001", "1"),
    ("1", "0.0000001", "10"),
    ("1", "0.000001", "100"),
    ("1", "0.00001", "1000"),
    ("1", "0.0001", "10000"),
    ("1", "0.001", "100000"),
    ("1", "0.01", "1000000"),
    ("1", "0.1", "10000000"),
    ("1", "1.0", "100000000"),
    ("1", "0.00000005", "5"),
    ("1", "0.00000002", "2"),

    ("0.1", "0.0000001", "1"),
    ("0.1", "0.000001", "10"),
    ("0.1", "0.00001", "100"),
    ("0.1", "0.0001", "1000"),
    ("0.1", "0.001", "10000"),
    ("0.1", "0.01", "100000"),
    ("0.1", "0.1", "1000000"),
    ("0.1", "1.0", "10000000"),
    ("0.1", "10", "100000000"),
    ("0.1", "0.0000005", "5"),
    ("0.1", "0.0000002", "2"),


    # Should result to the largest UFix64
    ("5", "36893488147.41910323", "1.0"),
    ("5", "3689348814.74191032", "10.0"),
    ("5", "368934881.47419103", "100.0"),
    ("5", "36893488.14741910", "1000.0"),
    ("5", "3689348.81474191", "10000.0"),
    ("5", "368934.88147419", "100000.0"),
    ("5", "36893.48814741", "1000000.0"),
    ("5", "3689.34881474", "10000000.0"),
    ("5", "368.93488147", "100000000.0"),
]

FMDUFix64OverflowTests = [
    # Overflow cases for UFix64 division
    ("1", "MaxUFix64", "0.99999999"),
    ("1", "MaxUFix64", "0.1"),
    ("1", "MaxUFix64", "0.01"),
    ("1", "MaxUFix64", "0.001"),
    ("1", "MaxUFix64", "0.00001"),
    ("1", "MaxUFix64", "0.0000001"),

    ("MaxUFix64", "1", "0.99999999"),
    ("MaxUFix64", "1", "0.1"),
    ("MaxUFix64", "1", "0.01"),
    ("MaxUFix64", "1", "0.001"),
    ("MaxUFix64", "1", "0.00001"),
    ("MaxUFix64", "1", "0.0000001"),

    ("5", "36893488147.41910323", "0.99999999"),
    ("5", "3689348814.74191032", "0.09999999"),
    ("5", "368934881.47419103", "0.00999999"),
    ("5", "36893488.14741910", "0.00099999"),
    ("5", "3689348.81474191", "0.00009999"),
    ("5", "368934.88147419", "0.00000999"),
    ("5", "36893.48814741", "0.00000099"),
    ("5", "3689.34881474", "0.00000009"),

    ("0.1", "HalfMaxUFix64", "0.00000001"),
    ("0.1", "HalfMaxUFix64", "0.0000001"),
    ("0.1", "HalfMaxUFix64", "0.000001"),
    ("0.1", "HalfMaxUFix64", "0.00001"),
    ("0.1", "HalfMaxUFix64", "0.0001"),
    ("0.1", "HalfMaxUFix64", "0.001"),

    ("HalfMaxUFix64", "2.00000001", "1"),
    ("HalfMaxUFix64", "2.0000001", "1"),
    ("HalfMaxUFix64", "2.000001", "1"),
    ("HalfMaxUFix64", "2.0001", "1"),
    ("HalfMaxUFix64", "2.001", "1"),
    ("HalfMaxUFix64", "2.01", "1"),
    ("HalfMaxUFix64", "2.1", "1"),

    ("1", "HalfMaxUFix64", "0.49999999"),
    ("1", "HalfMaxUFix64", "0.4999999"),
    ("1", "HalfMaxUFix64", "0.499999"),
    ("1", "HalfMaxUFix64", "0.49999"),
    ("1", "HalfMaxUFix64", "0.4999"),
    ("1", "HalfMaxUFix64", "0.499"),
    ("1", "HalfMaxUFix64", "0.49"),
]

FMDUFix64UnderflowTests = [
    ("1e-8", "1e-8", "1"),

    ("1", "0.00000001", "2.1"),
    ("1", "0.00000001", "10.0"),
    ("1", "0.00000001", "100.0"),
    ("1", "0.00000001", "1000.0"),
    ("1", "0.00000001", "100000000.0"),
    ("1", "1.0", "184467440737.09551615"),
    ("1", "1.0", "100000000000.0"),
    ("1", "1.0", "99999999999.0"),
    ("1", "0.00000001", "184467440737.09551615"),
    ("1", "0.00000001", "99999999999.0"),

    ("1", "0.00000001", "2.1"),
    ("1", "0.00000001", "10.0"),
    ("1", "0.00000001", "100.0"),
    ("1", "0.00000001", "1000.0"),
    ("1", "0.00000001", "100000000.0"),
    ("1", "1.0", "184467440737.09551615"),
    ("1", "1.0", "100000000000.0"),
    ("1", "1.0", "99999999999.0"),
    ("1", "0.00000001", "184467440737.09551615"),
    ("1", "0.00000001", "99999999999.0"),

    ("0.00000001", "0.0000001", "1"),
    ("0.0000001", "0.00000001", "1"),
    ("0.000001", "0.000001", "1"),

    ("0.01", "0.0000001", "1"),
    ("0.001", "0.000001", "1"),
    ("0.0001", "0.00001", "1"),
    ("0.00001", "0.0001", "1"),
    ("0.000001", "0.001", "1"),
    ("0.0000001", "0.01", "1"),
    ("0.0000001", "0.01", "1"),

    ("0.99999999", "0.00000001", "2"),
    ("0.09999999", "0.0000001", "2"),
    ("0.00999999", "0.000001", "2"),
    ("0.00099999", "0.00001", "2"),
    ("0.00009999", "0.0001", "2"),
    ("0.00000999", "0.001", "2"),
    ("0.00000099", "0.01", "2"),
    ("0.00000009", "0.1", "2"),

    ("0.00000005", "0.19999999", "2"),
    ("0.00000002", "0.49999999", "2"),
]

FMDUFix64DivByZeroTests = [
    ("1", "1.0", "0.0"),
    ("1", "0.0", "0.0"),
    ("0", "0.0", "0.0"),
    ("1", "1e-8", "0.0"),
    ("1", "MaxUFix64", "0.0"),
    ("1", "HalfMaxUFix64", "0.0"),
]


# DivFix64Tests = [
#     # Simple cases
#     ("1.0", "1.0"),
#     ("1.0", "1e8"),
#     ("1.1", "100000001.0"),
#     ("10.0", "100000001.0"),
#     ("1e8", "1e8"),
#     ("1e8", "99999999.0"),
#     ("1e8", "100000001.0"),
#     ("5", "-1"),
#     ("5", "-2"),
#     ("5", "-3"),
#     ("5", "-4"),
#     ("5", "-5"),
#     ("5", "-6"),
#     ("5", "-7"),
#     ("5", "-8"),
#     ("5", "-9"),
#     ("5", "-10"),
#     ("1.0", "0.5"),
#     ("1.0", "2.0"),
#     ("2.0", "1.0"),
#     ("1.0", "-2.0"),
#     ("-2.0", "2.0"),
#     ("-2.0", "-2.0"),
#     ("1.0", "99999999.0"),

#     # Random cases
#     ("123.456", "789.012"),
#     ("456.789", "123.456"),
#     ("0.000123", "0.000456"),
#     ("0.000789", "0.000321"),
#     ("98765.4321", "12345.6789"),
#     ("31415.9265", "27182.8182"),
#     ("1.23456789", "0.98765432"),
#     ("0.99999999", "0.00000001"),
#     ("123.456", "789.012"),
#     ("-456.789", "123.456"),
#     ("0.000123", "0.000456"),
#     ("-0.000789", "0.000321"),
#     ("98765.4321", "-12345.6789"),
#     ("31415.9265", "27182.8182"),
#     ("-27182.8182", "-31415.9265"),
#     ("1.23456789", "-0.98765432"),
#     ("0.99999999", "0.00000001"),
#     ("-0.99999999", "-0.00000001"),

#     # Near the square root of 2^63
#     ("MaxFix64", "303700.0499"),
#     ("MaxFix64", "303700.0499"),
#     ("MaxFix64", "303700.04999760"),
#     ("MaxFix64", "-303700.0499"),
#     ("MaxFix64", "-303700.0499"),
#     ("MaxFix64", "-303700.04999760"),

#     ("MinFix64", "303700.0499"),
#     ("MinFix64", "303700.0499"),
#     ("MinFix64", "303700.04999760"),
#     ("MinFix64", "-303700.0499"),
#     ("MinFix64", "-303700.0499"),
#     ("MinFix64", "-303700.04999760"),

#     # Starting big
#     ("MaxFix64", "1"),
#     ("MaxFix64", "10"),
#     ("MaxFix64", "100"),
#     ("MaxFix64", "1000"),
#     ("MaxFix64", "10000"),
#     ("MaxFix64", "100000"),
#     ("MaxFix64", "1000000"),
#     ("MaxFix64", "10000000"),
#     ("MaxFix64", "100000000"),
#     ("MaxFix64", "1000000000"),
#     ("MaxFix64", "10000000000"),

#     ("MaxFix64", "-1"),
#     ("MaxFix64", "-10"),
#     ("MaxFix64", "-100"),
#     ("MaxFix64", "-1000"),
#     ("MaxFix64", "-10000"),
#     ("MaxFix64", "-100000"),
#     ("MaxFix64", "-1000000"),
#     ("MaxFix64", "-10000000"),
#     ("MaxFix64", "-100000000"),
#     ("MaxFix64", "-1000000000"),
#     ("MaxFix64", "-10000000000"),

#     ("MinFix64", "1"),
#     ("MinFix64", "10"),
#     ("MinFix64", "100"),
#     ("MinFix64", "1000"),
#     ("MinFix64", "10000"),
#     ("MinFix64", "100000"),
#     ("MinFix64", "1000000"),
#     ("MinFix64", "10000000"),
#     ("MinFix64", "100000000"),
#     ("MinFix64", "1000000000"),
#     ("MinFix64", "10000000000"),

#     ("MinFix64 + 1e-8", "-1"),
#     ("MinFix64", "-10"),
#     ("MinFix64", "-100"),
#     ("MinFix64", "-1000"),
#     ("MinFix64", "-10000"),
#     ("MinFix64", "-100000"),
#     ("MinFix64", "-1000000"),
#     ("MinFix64", "-10000000"),
#     ("MinFix64", "-100000000"),
#     ("MinFix64", "-1000000000"),
#     ("MinFix64", "-10000000000"),

#     ("MaxFix64", "1"),
#     ("HalfMaxFix64", "0.5"),
#     ("MaxFix64", "-1"),
#     ("HalfMaxFix64", "-0.5"),
#     ("MinFix64", "1"),
#     ("HalfMinFix64 + 1e-8", "0.5"),
#     ("MinFix64 + 1e-8", "-1"),
#     ("HalfMinFix64 + 1e-8", "-0.5"),

#     ("MaxFix64", "1.0"),
#     ("MaxFix64", "2.0"),
#     ("MaxFix64", "MaxFix64"),
#     ("MinFix64", "1.0"),
#     ("MinFix64", "2.0"),
#     ("MinFix64", "MinFix64"),

#     # Things that divide to the smallest Fix64 (in magnitude)
#     ("0.00000001", "1"),
#     ("0.0000001", "10"),
#     ("0.000001", "100"),
#     ("0.00001", "1000"),
#     ("0.0001", "10000"),
#     ("0.001", "100000"),
#     ("0.01", "1000000"),
#     ("0.1", "10000000"),
#     ("1.0", "100000000"),
#     ("0.00000005", "5"),
#     ("0.00000002", "2"),

#     ("0.00000001", "-1"),
#     ("0.0000001", "-10"),
#     ("0.000001", "-100"),
#     ("0.00001", "-1000"),
#     ("0.0001", "-10000"),
#     ("0.001", "-100000"),
#     ("0.01", "-1000000"),
#     ("0.1", "-10000000"),
#     ("1.0", "-100000000"),
#     ("0.00000005", "-5"),
#     ("0.00000002", "-2"),

#     ("-0.00000001", "1"),
#     ("-0.0000001", "10"),
#     ("-0.000001", "100"),
#     ("-0.00001", "1000"),
#     ("-0.0001", "10000"),
#     ("-0.001", "100000"),
#     ("-0.01", "1000000"),
#     ("-0.1", "10000000"),
#     ("-1.0", "100000000"),
#     ("-0.00000005", "5"),
#     ("-0.00000002", "2"),

#     ("-0.00000001", "-1"),
#     ("-0.0000001", "-10"),
#     ("-0.000001", "-100"),
#     ("-0.00001", "-1000"),
#     ("-0.0001", "-10000"),
#     ("-0.001", "-100000"),
#     ("-0.01", "-1000000"),
#     ("-0.1", "-10000000"),
#     ("-1.0", "-100000000"),
#     ("-0.00000005", "-5"),
#     ("-0.00000002", "-2"),

#     # Same as above, but with a SLIGHTLY smaller divisor
#     ("0.00000001", "0.99999999"),
#     ("0.0000001", "9.99999999"),
#     ("0.000001", "99.99999999"),
#     ("0.00001", "999.99999999"),
#     ("0.0001", "9999.99999999"),
#     ("0.001", "99999.99999999"),
#     ("0.01", "999999.99999999"),
#     ("0.1", "9999999.99999999"),
#     ("1.0", "99999999.99999999"),

#     ("0.00000001", "-0.99999999"),
#     ("0.0000001", "-9.99999999"),
#     ("0.000001", "-99.99999999"),
#     ("0.00001", "-999.99999999"),
#     ("0.0001", "-9999.99999999"),
#     ("0.001", "-99999.99999999"),
#     ("0.01", "-999999.99999999"),
#     ("0.1", "-9999999.99999999"),
#     ("1.0", "-99999999.99999999"),

#     ("-0.00000001", "0.99999999"),
#     ("-0.0000001", "9.99999999"),
#     ("-0.000001", "99.99999999"),
#     ("-0.00001", "999.99999999"),
#     ("-0.0001", "9999.99999999"),
#     ("-0.001", "99999.99999999"),
#     ("-0.01", "999999.99999999"),
#     ("-0.1", "9999999.99999999"),
#     ("-1.0", "99999999.99999999"),
    
#     ("-0.00000001", "-0.99999999"),
#     ("-0.0000001", "-9.99999999"),
#     ("-0.000001", "-99.99999999"),
#     ("-0.00001", "-999.99999999"),
#     ("-0.0001", "-9999.99999999"),
#     ("-0.001", "-99999.99999999"),
#     ("-0.01", "-999999.99999999"),
#     ("-0.1", "-9999999.99999999"),
#     ("-1.0", "-99999999.99999999"),

#     # Should divide to the largest Fix64
#     ("92233720368.54775807", "1.0"),
#     ("9223372036.85477580", "0.1"),
#     ("922337203.68547758", "0.01"),
#     ("92233720.36854775", "0.001"),
#     ("9223372.03685477", "0.0001"),
#     ("922337.20368547", "0.00001"),
#     ("92233.72036854", "0.000001"),
#     ("9223.37203685", "0.0000001"),
#     ("922.33720368", "0.00000001"),

#     ("92233720368.54775807", "-1.0"),
#     ("9223372036.85477580", "-0.1"),
#     ("922337203.68547758", "-0.01"),
#     ("92233720.36854775", "-0.001"),
#     ("9223372.03685477", "-0.0001"),
#     ("922337.20368547", "-0.00001"),
#     ("92233.72036854", "-0.000001"),
#     ("9223.37203685", "-0.0000001"),
#     ("922.33720368", "-0.00000001"),

#     ("-92233720368.54775808", "1.0"),
#     ("-9223372036.85477580", "0.1"),
#     ("-922337203.68547758", "0.01"),
#     ("-92233720.36854775", "0.001"),
#     ("-9223372.03685477", "0.0001"),
#     ("-922337.20368547", "0.00001"),
#     ("-92233.72036854", "0.000001"),
#     ("-9223.37203685", "0.0000001"),
#     ("-922.33720368", "0.00000001"),

#     ("-92233720368.54775807", "-1.0"),
#     ("-9223372036.85477580", "-0.1"),
#     ("-922337203.68547758", "-0.01"),
#     ("-92233720.36854775", "-0.001"),
#     ("-9223372.03685477", "-0.0001"),
#     ("-922337.20368547", "-0.00001"),
#     ("-92233.72036854", "-0.000001"),
#     ("-9223.37203685", "-0.0000001"),
#     ("-922.33720368", "-0.00000001"),

# ]

# # Overflow and DivByZero test data for Fix64 division
# DivFix64OverflowTests = [
#     ("MinFix64", "-0.00000001"),
#     ("MinFix64", "-0.0000001"),
#     ("MinFix64", "-0.000001"),
#     ("MinFix64", "-0.0001"),
#     ("MinFix64", "-0.001"),
#     ("MinFix64", "-0.01"),
#     ("MinFix64", "-0.1"),
#     ("MinFix64", "-0.99999999"),
#     ("HalfMinFix64", "-0.00000001"),
#     ("HalfMinFix64", "-0.0000001"),
#     ("HalfMinFix64", "-0.000001"),
#     ("HalfMinFix64", "-0.0001"),
#     ("HalfMinFix64", "-0.001"),
#     ("HalfMinFix64", "-0.01"),
#     ("HalfMinFix64", "-0.1"),
#     ("MaxFix64", "0.00000001"),
#     ("MaxFix64", "0.0000001"),
#     ("MaxFix64", "0.000001"),
#     ("MaxFix64", "0.0001"),
#     ("MaxFix64", "0.001"),
#     ("MaxFix64", "0.01"),
#     ("MaxFix64", "0.1"),
#     ("HalfMaxFix64", "0.00000001"),
#     ("HalfMaxFix64", "0.0000001"),
#     ("HalfMaxFix64", "0.000001"),
#     ("HalfMaxFix64", "0.0001"),
#     ("HalfMaxFix64", "0.001"),
#     ("HalfMaxFix64", "0.01"),
#     ("HalfMaxFix64", "0.1"),
# ]

# DivFix64NegOverflowTests = [
#     ("MinFix64", "0.00000001"),
#     ("MinFix64", "0.0000001"),
#     ("MinFix64", "0.000001"),
#     ("MinFix64", "0.0001"),
#     ("MinFix64", "0.001"),
#     ("MinFix64", "0.01"),
#     ("MinFix64", "0.1"),
#     ("MinFix64", "0.99999999"),
#     ("HalfMinFix64", "0.00000001"),
#     ("HalfMinFix64", "0.0000001"),
#     ("HalfMinFix64", "0.000001"),
#     ("HalfMinFix64", "0.0001"),
#     ("HalfMinFix64", "0.001"),
#     ("HalfMinFix64", "0.01"),
#     ("HalfMinFix64", "0.1"),
#     ("MaxFix64", "-0.00000001"),
#     ("MaxFix64", "-0.0000001"),
#     ("MaxFix64", "-0.000001"),
#     ("MaxFix64", "-0.0001"),
#     ("MaxFix64", "-0.001"),
#     ("MaxFix64", "-0.01"),
#     ("MaxFix64", "-0.1"),
#     ("HalfMaxFix64", "-0.00000001"),
#     ("HalfMaxFix64", "-0.0000001"),
#     ("HalfMaxFix64", "-0.000001"),
#     ("HalfMaxFix64", "-0.0001"),
#     ("HalfMaxFix64", "-0.001"),
#     ("HalfMaxFix64", "-0.01"),
#     ("HalfMaxFix64", "-0.1"),
# ]


# DivFix64UnderflowTests = [
#     # Underflow cases for Fix64 division (results too small to represent)
#     ("0.00000001", "2.1"),
#     ("0.00000001", "10.0"),
#     ("0.00000001", "100.0"),
#     ("0.00000001", "1000.0"),
#     ("0.00000001", "100000000.0"),
#     ("1.0", "92233720368.54775807"),
#     ("1.0", "90000000000.0"),
#     ("1.0", "80000000000.0"),
#     ("0.00000001", "92233720368.54775807"),
#     ("0.00000001", "80000000000.0"),
# ]

# DivFix64DivByZeroTests = [
#     ("1.0", "0.0"),
#     ("0.0", "0.0"),
#     ("MaxFix64", "0.0"),
#     ("MinFix64", "0.0"),
#     ("HalfMaxFix64", "0.0"),
#     ("HalfMinFix64", "0.0"),
# ]


def generate_fmd_ufix64_tests():
    lines = ["var FMDUFix64Tests = []struct{ A, B, C, Expected uint64 }{"]
    for a_str, b_str, c_str in FMDUFix64Tests:
        a = parseInput64(a_str)
        b = parseInput64(b_str)
        c = parseInput64(c_str)
        try:
            r = a * b / c
        except Exception:
            r = Decimal('0')
        a_hex = go_hex64(to_ufix64(a))
        b_hex = go_hex64(to_ufix64(b))
        c_hex = go_hex64(to_ufix64(c))
        r_hex = go_hex64(to_ufix64(r))
        comment = f"// {a_str} * {b_str} / {c} = {r}"
        data = f"    {{{a_hex}, {b_hex}, {c_hex}, {r_hex}}}"
        pad = " " * (60 - len(data))
        lines.append(f"{data},{pad}{comment}")
    lines.append("}")
    return lines

def generate_fmd_ufix64_overflow_tests():
    lines = ["var FMDUFix64OverflowTests = []struct{ A, B, C uint64 }{"]
    for a_str, b_str, c_str in FMDUFix64OverflowTests:
        a = parseInput64(a_str)
        b = parseInput64(b_str)
        c = parseInput64(c_str)
        a_hex = go_hex64(to_ufix64(a))
        b_hex = go_hex64(to_ufix64(b))
        c_hex = go_hex64(to_ufix64(c))
        comment = f"// {a_str} * {b_str} / {c_str} = overflow"
        data = f"    {{{a_hex}, {b_hex}, {c_hex}}}"
        pad = " " * (40 - len(data))
        lines.append(f"{data},{pad}{comment}")
    lines.append("}")
    return lines

def generate_fmd_ufix64_underflow_tests():
    lines = ["var FMDUFix64UnderflowTests = []struct{ A, B, C uint64 }{"]
    for a_str, b_str, c_str in FMDUFix64UnderflowTests:
        a = parseInput64(a_str)
        b = parseInput64(b_str)
        c = parseInput64(c_str)
        a_hex = go_hex64(to_ufix64(a))
        b_hex = go_hex64(to_ufix64(b))
        c_hex = go_hex64(to_ufix64(c))
        comment = f"// {a_str} * {b_str} / {c_str} = underflow"
        data = f"    {{{a_hex}, {b_hex}, {c_hex}}}"
        pad = " " * (40 - len(data))
        lines.append(f"{data},{pad}{comment}")
    lines.append("}")
    return lines

def generate_fmd_ufix64_divbyzero_tests():
    lines = ["var FMDUFix64DivByZeroTests = []struct{ A, B, C uint64 }{"]
    for a_str, b_str, c_str in FMDUFix64DivByZeroTests:
        a = parseInput64(a_str)
        b = parseInput64(b_str)
        c = parseInput64(c_str)
        a_hex = go_hex64(to_ufix64(a))
        b_hex = go_hex64(to_ufix64(b))
        c_hex = go_hex64(to_ufix64(c))
        comment = f"// {a_str} * {b_str} / {c_str} = div by zero"
        pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}, {c_hex}}},"))
        lines.append(f"    {{{a_hex}, {b_hex}, {c_hex}}},{pad}{comment}")
    lines.append("}")
    return lines

# def generate_div_fix64_tests():
#     lines = ["var DivFix64Tests = []struct{ A, B, Expected uint64 }{"]
#     for a_str, b_str in DivFix64Tests:
#         a = parseInput64(a_str)
#         b = parseInput64(b_str)
#         try:
#             c = a / b
#         except Exception:
#             c = Decimal('0')
#         a_hex = go_hex64(to_fix64(a))
#         b_hex = go_hex64(to_fix64(b))
#         c_hex = go_hex64(to_fix64(c))
#         comment = f"// {a_str} / {b_str} = {c}"
#         pad = " " * (60 - len(f"    {{{a_hex}, {b_hex}, {c_hex}}},"))
#         lines.append(f"    {{{a_hex}, {b_hex}, {c_hex}}},{pad}{comment}")
#     lines.append("}")
#     return lines

# def generate_div_fix64_overflow_tests():
#     lines = ["var DivFix64OverflowTests = []struct{ A, B uint64 }{"]
#     for a_str, b_str in DivFix64OverflowTests:
#         a = parseInput64(a_str)
#         b = parseInput64(b_str)
#         a_hex = go_hex64(to_fix64(a))
#         b_hex = go_hex64(to_fix64(b))
#         comment = f"// {a_str} / {b_str} = overflow"
#         pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
#         lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
#     lines.append("}")
#     return lines

# def generate_div_fix64_neg_overflow_tests():
#     lines = ["var DivFix64NegOverflowTests = []struct{ A, B uint64 }{"]
#     for a_str, b_str in DivFix64NegOverflowTests:
#         a = parseInput64(a_str)
#         b = parseInput64(b_str)
#         a_hex = go_hex64(to_fix64(a))
#         b_hex = go_hex64(to_fix64(b))
#         comment = f"// {a_str} / {b_str} = negative overflow"
#         pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
#         lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
#     lines.append("}")
#     return lines

# def generate_div_fix64_underflow_tests():
#     lines = ["var DivFix64UnderflowTests = []struct{ A, B uint64 }{"]
#     for a_str, b_str in DivFix64UnderflowTests:
#         a = parseInput64(a_str)
#         b = parseInput64(b_str)
#         a_hex = go_hex64(to_fix64(a))
#         b_hex = go_hex64(to_fix64(b))
#         comment = f"// {a_str} / {b_str} = underflow"
#         pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
#         lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
#     lines.append("}")
#     return lines

# def generate_div_fix64_divbyzero_tests():
#     lines = ["var DivFix64DivByZeroTests = []struct{ A, B uint64 }{"]
#     for a_str, b_str in DivFix64DivByZeroTests:
#         a = parseInput64(a_str)
#         b = parseInput64(b_str)
#         a_hex = go_hex64(to_fix64(a))
#         b_hex = go_hex64(to_fix64(b))
#         comment = f"// {a_str} / {b_str} = div by zero"
#         pad = " " * (40 - len(f"    {{{a_hex}, {b_hex}}},"))
#         lines.append(f"    {{{a_hex}, {b_hex}}},{pad}{comment}")
#     lines.append("}")
#     return lines

def main():
    go_lines = [
        "// Code generated by testgen/div.py; DO NOT EDIT.",
        "package fixedPoint",
        "",
    ]
    go_lines.extend(generate_fmd_ufix64_tests())
    go_lines.extend(generate_fmd_ufix64_overflow_tests())
    go_lines.extend(generate_fmd_ufix64_underflow_tests())
    go_lines.extend(generate_fmd_ufix64_divbyzero_tests())

    print('\n'.join(go_lines))

if __name__ == "__main__":
    main()
