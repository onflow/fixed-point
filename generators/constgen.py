# constgen.py
# Generates Go constant definitions for transcendental values (pi, 2*pi, pi/2, 3*pi/2, ln(2), etc.)
# for Fix64, fix64_extra, Fix128, fix128_extra, etc.
# Uses Decimal and mpmath for high-precision computation.

from decimal import *
import mpmath
from utils import go_hex128

getcontext().prec = 50
mpmath.mp.dps = 50

# Fixed-point scales
Fix64Scale = Decimal('1e8')
Fix128Scale = Decimal('1e24')

extraBits = 8
fix64ExtraScale = Fix64Scale * (1 << extraBits)
fix128ExtraScale = Fix128Scale * (1 << extraBits)

# Compute constants
pi = Decimal(str(mpmath.pi)) # Pi to 50 decimal places!
ln2 = Decimal(str(mpmath.ln(2)))

# Fix64
Fix64_pi = pi * Fix64Scale
fix64_2pi = pi * 2 * Fix64Scale
fix64_pi_over_2 = pi / 2 * Fix64Scale
fix64_3pi_over_2 = pi * 3 / 2 * Fix64Scale
fix64_TwoPiShifted33 = pi * 2 * (2 ** 33) * Fix64Scale

# Fix128
Fix128_pi = pi * Fix128Scale
fix128_2pi = pi * 2 * Fix128Scale
fix128_pi_over_2 = pi / 2 * Fix128Scale
fix128_3pi_over_2 = pi * 3 / 2 * Fix128Scale
fix128_TwoPiShifted44 = pi * 2 * (2 ** 44) * Fix128Scale

# fix64_extra
fix64_extra_pi = pi * fix64ExtraScale
fix64_extra_2pi = pi * 2 * fix64ExtraScale
fix64_extra_pi_over_2 = pi / 2 * fix64ExtraScale
fix64_extra_3pi_over_2 = pi * 3 / 2 * fix64ExtraScale

# sin(x) is functionally linear for all values <= this "iota" value in fix64_extra
# The first non-linear term of the Taylor series for sin(x) is x^3/6, so this is the
# largest value of x for which x^3/6 is too small to represent in fix64_extra.
fix64_extra_sinIota = (Decimal(6) / Decimal(fix64ExtraScale)) ** (Decimal(1) / Decimal(3)) * fix64ExtraScale

# ln(2) for fix64_extra
ln2_fix64_extra = ln2 * fix64ExtraScale

# Output Go code
def go_const(name, value, typ='int64'):
    intValue = int(value.to_integral_value(rounding=ROUND_HALF_UP))
    return f"const {name} = {typ}({hex(intValue)})"

def go_const128(name, value, typ='Fix128'):
    """Output a Go constant for a 128-bit value."""
    intVal = int(value.to_integral_value(rounding=ROUND_HALF_UP))
    return f"var {name} = {typ}({go_hex128(intVal)})"

def main():
    print("// Code generated by testgen/constgen.py; DO NOT EDIT.")
    print("package fixedPoint")
    print()
    print("// Exported scale constants")
    print(f"const Fix64Scale = {Fix64Scale}")
    print("const Fix64One = Fix64(1 * Fix64Scale) // 1 in fix64")
    print(f"const Fix128Scale = {Fix128Scale} // NOTE: Bigger than uint64! Mostly here as documentation...")
    print(go_const128('Fix128One', Fix128Scale))
    print()
    print("// Internal scale constants")
    print(f"const extraBits = {extraBits} // Number of extra bits for fix64_extra and fix128_extra")
    print(f"const fix64ExtraScale = Fix64Scale << extraBits // {fix64ExtraScale}")
    print(f"const fix128ExtraScale = {fix128ExtraScale} // NOTE: Bigger than uint64! Mostly here as documentation...")
    print()
    print("// Fix64 transcendental constants")
    print(go_const('Fix64_Pi', Fix64_pi, 'Fix64'))
    print(go_const('fix64_2Pi', fix64_2pi, 'Fix64'))
    print(go_const('fix64_PiOver2', fix64_pi_over_2, 'Fix64'))
    print(go_const('fix64_3PiOver2', fix64_3pi_over_2, 'Fix64'))
    print(go_const('fix64_TwoPiShifted33', fix64_TwoPiShifted33, 'uint64'))
    print()
    print("// Fix128 transcendental constants")
    print(go_const128('Fix128_Pi', Fix128_pi, 'Fix128'))
    print(go_const128('fix128_2Pi', fix128_2pi, 'Fix128'))
    print(go_const128('fix128_PiOver2', fix128_pi_over_2, 'Fix128'))
    print(go_const128('fix128_3PiOver2', fix128_3pi_over_2, 'Fix128'))
    print(go_const128('fix128_TwoPiShifted44', fix128_TwoPiShifted44, 'raw128'))
    print()
    print("// fix64_extra transcendental constants")
    print(go_const('fix64_extra_Pi', fix64_extra_pi, 'fix64_extra'))
    print(go_const('fix64_extra_2Pi', fix64_extra_2pi, 'fix64_extra'))
    print(go_const('fix64_extra_PiOver2', fix64_extra_pi_over_2, 'fix64_extra'))
    print(go_const('fix64_extra_3PiOver2', fix64_extra_3pi_over_2, 'fix64_extra'))
    print(go_const('fix64_extra_sinIota', fix64_extra_sinIota, 'fix64_extra'))
    print()
    print("// ln(2) for fix64_extra")
    print(go_const('ln2_fix64_extra', ln2_fix64_extra, 'int64'))

if __name__ == "__main__":
    main()
