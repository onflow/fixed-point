# constgen.py
# Generates Go constant definitions for Fix64 and Fix128 types.
# Uses Decimal and mpmath for high-precision computation.

from decimal import *
import mpmath as mp
from utils import go_hex128

getcontext().prec = 50
mp.mp.dps = 50

# Fixed-point scales
Fix64Scale = Decimal('1e8')
Fix128Scale = Decimal('1e24')
fix64Epsilon = Decimal('1e-8')  # Smallest representable difference in Fix64
fix128Epsilon = Decimal('1e-24')  # Smallest representable difference in Fix128

UFix64Max = Decimal(0xffffffffffffffff) / Fix64Scale
Fix64Max = Decimal(0x7fffffffffffffff) / Fix64Scale
Fix64Min = Decimal(-0x8000000000000000) / Fix64Scale

UFix128Max = Decimal(0xffffffffffffffffffffffffffffffff) / Fix128Scale
Fix128Max =  Decimal(0x7fffffffffffffffffffffffffffffff) / Fix128Scale
Fix128Min = Decimal(-0x80000000000000000000000000000000) / Fix128Scale

# Base constants
pi = Decimal(str(mp.pi)) # Pi to 50 decimal places!
ln2 = Decimal(2).ln() # Natural logarithm of 2


# Here we calculate the computation base for the trig functions for Fix64.
# 
# The constant below comes from running genFactors.py. It finds a large multiple
# for 2π that minimizes the error after the 8th decimal place, while still ensuring
# that trig values that have been scaled by this factor can still fit in a Fix64.
# 
# This allows us to have a "constant" for 2π that is accurate to nearly 30 decimal
# places, even though we can fit it into to a 64-bit value. (Which is almost magic
# given that 64-bits can only represent 19 decimal places accurately!)
fix64TrigMultiplier = Decimal(10632378527)
fix64PiScaled = pi * fix64TrigMultiplier
fix64TwoPiScaled = fix64PiScaled * 2
fix64HalfPiScaled = fix64PiScaled / 2
fix64ThreeHalfPiScaled = fix64PiScaled * 3 / 2

# to compute sin(x), the first non-linear term would be (x^3)/6. We use this fact
# to find a reasonable limit on using a simple linear approximation for sin(x).
# The following calculation finds the largest value of x for which the (x^3)/6
# is too small to affect the result (when scaled by fix64TrigMultiplier).
fix64_sinIota = (Decimal(3) / Decimal(Fix64Scale * fix64TrigMultiplier)) ** (Decimal(1) / Decimal(3))
fix64SinIotaScaled = fix64_sinIota * fix64TrigMultiplier

# A factor for calculating ln() an exp() in Fix64, comes from genFactors.py
fix64LnMultiplier = Decimal(3095485757)
fix64Ln2Scaled = ln2 * fix64LnMultiplier

 # Largest input to exp() that doesn't overflow
maxLn64 = UFix64Max.ln().quantize(fix64Epsilon, rounding='ROUND_DOWN')
 # Smallest input to exp() that doesn't underflow
minLn64 = (fix64Epsilon / 2).ln().quantize(fix64Epsilon, rounding='ROUND_DOWN')


# Similar values to the above, but for Fix128
fix128TrigMultiplier = Decimal(24263469845778)
fix128PiScaled = pi * fix128TrigMultiplier
fix128TwoPiScaled = fix128PiScaled * 2
fix128HalfPiScaled = fix128PiScaled / 2
fix128ThreeHalfPiScaled = fix128PiScaled * 3 / 2

fix128_sinIota = (Decimal(3) / Decimal(Fix128Scale * fix128TrigMultiplier)) ** (Decimal(1) / Decimal(3))
fix128SinIotaScaled = fix128_sinIota * fix128TrigMultiplier

fix128LnMultiplier = Decimal(3095485757)
fix128Ln2Scaled = ln2 * fix64LnMultiplier

maxLn128 = UFix128Max.ln().quantize(fix64Epsilon, rounding='ROUND_DOWN')
minLn128 = (fix128Epsilon / 2).ln().quantize(fix64Epsilon, rounding='ROUND_DOWN')


# Output Go code
def go_const(name, value, typ):
    is128 = False
    match typ:
        case 'int64' | 'uint64':
            scaledValue = value

        case 'Fix64' | 'UFix64':
            scaledValue = value * Fix64Scale

        case 'Fix128' | 'UFix128':
            scaledValue = value * Fix128Scale
            is128 = True
        
        case 'raw128':
            scaledValue = value
            is128 = True
        
        case _:
            raise ValueError(f"Unknown type: {typ}")

    intValue = int(scaledValue.to_integral_value(rounding=ROUND_HALF_UP))

    if is128:
        if intValue >= 2**128:
            raise ValueError(f"Value {value} for {name} exceeds 128-bit range: {intValue}")

        decl = 'var'
        hexString = f"{{0x{(intValue >> 64 & 0xffffffffffffffff):016x}, 0x{(intValue & 0xffffffffffffffff):016x}}}"
        if type != 'raw128':
            hexString = f"raw128{hexString}"

    else:
        if intValue >= 2**64:
            raise ValueError(f"Value {value} for {name} exceeds 64-bit range: {intValue}")

        decl = 'const'
        hexString = f"0x{(intValue & 0xffffffffffffffff):016x}"

    return f"{decl} {name} = {typ}({hexString})"

def main():
    print("// Code generated by testgen/constgen.py; DO NOT EDIT.")
    print("package fixedPoint")
    print()
    print("// Exported scale constants")
    print(f"const Fix64Scale = {Fix64Scale}")
    print("const UFix64Zero = UFix64(0)")
    print("const Fix64Zero = Fix64(0)")
    print("const UFix64One = UFix64(1 * Fix64Scale) // 1 in fix64")
    print("const Fix64One = Fix64(1 * Fix64Scale) // 1 in fix64")
    print("const UFix64Iota = UFix64(1)")
    print("const Fix64Iota = Fix64(1)")
    print(f"const Fix64OneLeadingZeros = {64 - int(Fix64Scale).bit_length()} // Number of leading zero bits for Fix64One")    
    print("const UFix64Max = UFix64(0xffffffffffffffff) // Max value for UFix64")
    print("const Fix64Max = Fix64(0x7fffffffffffffff) // Max value for Fix64")
    print("const Fix64Min = Fix64(0x8000000000000000) // Min value for Fix64")
    print()
    print(f"const Fix128Scale = {Fix128Scale} // NOTE: Bigger than uint64! Mostly here as documentation...")
    print(go_const('UFix128Zero', Decimal(0), 'UFix128'))
    print(go_const('Fix128Zero', Decimal(0), 'Fix128'))
    print(go_const('UFix128One', Decimal(1), 'UFix128'))
    print(go_const('Fix128One', Decimal(1), 'Fix128'))
    print("var UFix128Iota = UFix128{0, 1}")
    print("var Fix128Iota = Fix128{0, 1}")
    print(f"const Fix128OneLeadingZeros = {128 - int(Fix128Scale).bit_length()} // Number of leading zero bits for Fix128One")    
    print(go_const('UFix128Max', UFix128Max, 'UFix128'))
    print(go_const('Fix128Max', Fix128Max, 'Fix128'))
    print(go_const('Fix128Min', Fix128Min, 'Fix128'))
    print()
    print("// Fix64 transcendental constants (see constgen.py for more information)")
    print(go_const('Fix64Pi', pi, 'Fix64'))
    print(go_const('fix64TrigMultiplier', fix64TrigMultiplier, 'uint64'))
    print(go_const('fix64TrigScale', fix64TrigMultiplier, 'Fix64'))
    print(go_const('fix64PiScaled', fix64PiScaled, 'Fix64'))
    print(go_const('fix64TwoPiScaled', fix64TwoPiScaled, 'Fix64'))
    print(go_const('fix64HalfPiScaled', fix64HalfPiScaled, 'Fix64'))
    print(go_const('fix64ThreeHalfPiScaled', fix64ThreeHalfPiScaled, 'Fix64'))
    print(go_const('fix64SinIotaScaled', fix64SinIotaScaled, 'Fix64'))
    print()
    print(go_const('fix64LnMultiplier', fix64LnMultiplier, 'uint64'))
    print(go_const('fix64LnScale', fix64LnMultiplier, 'Fix64'))
    print(go_const('ufix64LnScale', fix64LnMultiplier, 'UFix64'))
    print(go_const('fix64Ln2Scaled', fix64Ln2Scaled, 'Fix64'))
    print()
    print("// Valid logarithm bounds for Fix64")
    print(go_const('maxLn64', maxLn64, 'Fix64'))
    print(go_const('minLn64', minLn64, 'Fix64'))
    print()
    print("// Fix128 transcendental constants (see constgen.py for more information)")
    print(go_const('Fix128Pi', pi, 'Fix128'))
    print(go_const('fix128TrigMultiplier', fix128TrigMultiplier, 'uint64'))
    print(go_const('fix128TrigScale', fix128TrigMultiplier, 'Fix128'))
    print(go_const('fix128PiScaled', fix128PiScaled, 'Fix128'))
    print(go_const('fix128TwoPiScaled', fix128TwoPiScaled, 'Fix128'))
    print(go_const('fix128HalfPiScaled', fix128HalfPiScaled, 'Fix128'))
    print(go_const('fix128ThreeHalfPiScaled', fix128ThreeHalfPiScaled, 'Fix128'))
    print(go_const('fix128SinIotaScaled', fix128SinIotaScaled, 'Fix128'))
    print()
    print(go_const('fix128LnMultiplier', fix128LnMultiplier, 'uint64'))
    print(go_const('fix128LnScale', fix128LnMultiplier, 'Fix128'))
    print(go_const('ufix128LnScale', fix128LnMultiplier, 'UFix128'))
    print(go_const('fix128Ln2Scaled', fix128Ln2Scaled, 'Fix128'))
    print()
    print("// Valid logarithm bounds for Fix128")
    print(go_const('maxLn128', maxLn128, 'Fix128'))
    print(go_const('minLn128', minLn128, 'Fix128'))
    print()
if __name__ == "__main__":
    main()
