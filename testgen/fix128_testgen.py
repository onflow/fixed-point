# fix128_testgen.py
# Code generator for Go test data arrays for UFix128 and Fix128 arithmetic

from add128 import *
from sub128 import *
from mul128 import *
from div128 import *
# from trans64 import *
from decimal import getcontext

def main():
    getcontext().prec = 100  # Set precision for Decimal operations
    go_lines = [
        "// Code generated by testgen/fix128_testgen.py; DO NOT EDIT.",
        "package fixedPoint",
        "",
    ]
    go_lines.extend(generate_add_ufix128_tests())
    go_lines.extend(generate_add_ufix128_overflow_tests())
    go_lines.extend(generate_add_fix128_tests())
    go_lines.extend(generate_add_fix128_overflow_tests())
    go_lines.extend(generate_add_fix128_neg_overflow_tests())
    go_lines.extend(generate_sub_ufix128_tests())
    go_lines.extend(generate_sub_ufix128_neg_overflow_tests())
    go_lines.extend(generate_sub_fix128_tests())
    go_lines.extend(generate_sub_fix128_overflow_tests())
    go_lines.extend(generate_sub_fix128_neg_overflow_tests())
    go_lines.extend(generate_mul_ufix128_tests())
    go_lines.extend(generate_mul_ufix128_overflow_tests())
    go_lines.extend(generate_mul_ufix128_underflow_tests())
    go_lines.extend(generate_mul_fix128_tests())
    go_lines.extend(generate_mul_fix128_overflow_tests())
    go_lines.extend(generate_mul_fix128_underflow_tests())
    go_lines.extend(generate_mul_fix128_neg_overflow_tests())
    go_lines.extend(generate_div_ufix128_tests())
    go_lines.extend(generate_div_ufix128_overflow_tests())
    go_lines.extend(generate_div_ufix128_underflow_tests())
    go_lines.extend(generate_div_ufix128_divbyzero_tests())
    go_lines.extend(generate_div_fix128_tests())
    go_lines.extend(generate_div_fix128_overflow_tests())
    go_lines.extend(generate_div_fix128_neg_overflow_tests())
    go_lines.extend(generate_div_fix128_underflow_tests())
    go_lines.extend(generate_div_fix128_divbyzero_tests())
    # go_lines.extend(generate_sqrt_ufix128_tests())
    # go_lines.extend(generate_ln_ufix128_tests())
    print('\n'.join(go_lines))

if __name__ == "__main__":
    main()
