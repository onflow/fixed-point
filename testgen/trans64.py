# trans64.py
# Test generator for transcendental functions (e.g., sqrt) for UFix64 and Fix64
# More functions can be added later.

from utils import *
import math

# Symbolic and numeric test cases for sqrt (UFix64 only)
SqrtUFix64Tests = [
    ("0"),
    ("1"),
    ("4"),
    ("16"),
    ("100"),
    ("10000"),
    ("MaxUFix64"),
    ("HalfMaxUFix64"),
    ("0.0001"),
    ("1e-8"),
    ("0.05"),
    ("0.5"),
    ("0.09"),
    ("0.0009"),
    ("2"),
    ("3.14159265"),  # Pi
    ("6.28318530"),  # 2*Pi
    ("1234567890.12345678"),  # Large number
]

LnUFix64Tests = [
    ("1"),
    ("2"),
    ("4"),
    ("10"),
    ("100"),
    ("10000"),
    ("2.71828183"),  # e
    ("7.38905610"),  # e^2
    ("0.5"),
    ("0.25"),
    ("0.125"),
    ("0.01"),
    ("3.14159265"), # Pi
    ("6.28318530"), # 2*Pi
    ("1234567890.12345678"),
    ("MaxUFix64"),
    ("HalfMaxUFix64"),
    ("0.0001"),
    ("1e-8"),
]


def generate_sqrt_ufix64_tests():
    lines = ["var SqrtUFix64Tests = []struct{ A, Expected uint64 }{"]
    for a_str in SqrtUFix64Tests:
        a = parseInput64(a_str)
        expected = a.sqrt()
        a_hex = go_hex64(to_ufix64(a))
        expected_hex = go_hex64(to_ufix64(expected))
        data = f"    {{{a_hex}, {expected_hex}}},"
        comment = f"// sqrt({a_str}) = {float(expected)}"
        pad = " " * (40 - len(data))
        lines.append(f"{data}{pad}{comment}")
    lines.append("}")
    lines.append("")
    return lines

def generate_ln_ufix64_tests():
    lines = ["var LnUFix64Tests = []struct{ A, Expected uint64 }{"]
    for a_str in LnUFix64Tests:
        a = parseInput64(a_str)
        # ln(x) is undefined for x <= 0, skip or handle as needed
        if a <= 0:
            continue
        expected = a.ln()
        a_hex = go_hex64(to_ufix64(a))
        expected_hex = go_hex64(to_fix64(expected))  # ln can be negative, so use Fix64 encoding
        data = f"    {{{a_hex}, {expected_hex}}},"
        comment = f"// ln({a_str}) = {float(expected):.8f}"
        pad = " " * (40 - len(data))
        lines.append(f"{data}{pad}{comment}")
    lines.append("}")
    lines.append("")
    return lines

if __name__ == "__main__":
    go_lines = [
        "// Code generated by testgen/trans64.py; DO NOT EDIT.",
        "package fixedPoint",
        "",
    ]
    go_lines.extend(generate_sqrt_ufix64_tests())
    go_lines.extend(generate_ln_ufix64_tests())
    print('\n'.join(go_lines))